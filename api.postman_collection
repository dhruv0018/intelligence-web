{
	"id": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
	"name": "Intelligence API",
	"description": "",
	"order": [],
	"folders": [
		{
			"id": "6a1d90bd-fc67-c613-939a-beaa91a77436",
			"name": "Auth",
			"description": "",
			"order": [
				"5ae07c47-e982-040c-4566-b6f194a52f3a",
				"a95a7ee4-0c8f-a25b-a88e-6daee3234936"
			],
			"collection_name": "Intelligence API",
			"collection_id": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"owner": 0
		},
		{
			"id": "db467c0c-d17b-c6fa-150d-d05481e2d46c",
			"name": "FilterSets",
			"description": "",
			"order": [
				"b7c789c9-5ced-e1be-0d34-2273430c20a2",
				"db137f14-4edd-73ec-6d1a-1d10fae42df6"
			],
			"collection_name": "Intelligence API",
			"collection_id": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"owner": 0
		},
		{
			"id": "f223d77a-3509-7b26-5ceb-50dbb9aa594a",
			"name": "Games",
			"description": "",
			"order": [
				"20d7fbbb-5562-c15d-9b73-729c11cc8d30",
				"f0f05883-1c93-9184-a694-33a01c94cdcc",
				"81203ff7-29a8-e7c9-99d3-0a6eb996c552",
				"a48c0880-d445-15fc-94ae-7cd0aa47b6d8",
				"47e73311-ab16-9580-6c11-3e6f4b6d4803"
			],
			"collection_name": "Intelligence API",
			"collection_id": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"owner": 0
		},
		{
			"id": "cce060d0-b1bd-27d8-5fb6-ef2a5a60570c",
			"name": "Leagues",
			"description": "",
			"order": [
				"cf85affd-05cd-bc81-4706-5c706baad87a",
				"45bc9696-cba3-3b77-4f28-038ce3ef4bab",
				"55536021-6ba7-0634-fff6-4168d11b4d98",
				"ba3062f9-d037-9cdc-c7d0-e6872efacad8",
				"9f93db99-5da4-50e2-a6df-c41259a49269"
			],
			"collection_name": "Intelligence API",
			"collection_id": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"owner": 0
		},
		{
			"id": "c8056818-8157-7a05-efbb-45eb8eee9180",
			"name": "Plans",
			"description": "",
			"order": [
				"cfa85c7d-24d7-b7d4-ff3a-b97e6e5b8022",
				"5438a38c-a553-e8a8-15ab-517cf13eb30e",
				"5315b0ef-778d-1d43-05ae-0cd1a95e7dea",
				"47654c08-ef14-4782-87a2-a748b640fd85"
			],
			"collection_name": "Intelligence API",
			"collection_id": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"owner": 0
		},
		{
			"id": "ac529f43-f032-0d4c-c0bd-82de246ac58d",
			"name": "Players",
			"description": "",
			"order": [
				"842fbb03-51a7-f335-153c-cab183e58229",
				"e5ee026e-5e86-423f-cb13-8663086831a9",
				"074ffc78-4d92-8631-2465-665126d1eff4",
				"0f486c58-a204-d386-b426-06855cb69bff",
				"baa01893-f482-a29e-5728-8fedbdd096f8"
			],
			"collection_name": "Intelligence API",
			"collection_id": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"owner": 0
		},
		{
			"id": "7a9a0085-b8e1-f6d2-ad18-3437a9418e4b",
			"name": "Plays",
			"description": "",
			"order": [
				"3d84bf56-cbe0-0ee3-afa1-8146e0652cf6",
				"684a4215-3fb7-7cd0-92e7-6b98f3bab385",
				"0662bb5f-7e93-c8b6-2506-c3ccf3d7c63f",
				"ccfeba3f-7977-ee5f-883c-335c5f03b36b"
			],
			"collection_name": "Intelligence API",
			"collection_id": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"owner": 0
		},
		{
			"id": "d4cad1f1-5618-c812-fb6b-8104cce33f08",
			"name": "PositionSets",
			"description": "",
			"order": [
				"48ba2891-2850-3d89-f1f5-0633de7b3c8e",
				"78f8edd0-30a7-d32f-a594-d7b1419bcdf1"
			],
			"collection_name": "Intelligence API",
			"collection_id": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"owner": 0
		},
		{
			"id": "7dce73db-ccb6-da13-1e7b-f6d96fa0faa9",
			"name": "Reels",
			"description": "",
			"order": [
				"4cb464a9-8bb8-74c1-175e-de8374b76dd9",
				"dbdf8105-0aa3-4789-35cb-b2e85e7cb280",
				"41c4faff-a5a9-a9ab-d70d-244321f458d2",
				"d80aa41b-2109-d504-a8ce-171e515536e2",
				"11243d3a-2fa3-1ae2-6637-fd07bf20255c"
			],
			"collection_name": "Intelligence API",
			"collection_id": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"owner": 0
		},
		{
			"id": "0953f8a0-9750-28c6-d2b5-12fd90aec3fd",
			"name": "Schools",
			"description": "",
			"order": [
				"8230210a-121d-bf8d-e191-c700c00e90c3",
				"640edafe-a8aa-314b-dea1-bcbd04751c33",
				"ee75a20f-fe0c-9dbd-bb1a-ac91ffc780fb",
				"7f49ed1d-f37a-3ba7-8ebe-5a0d66db2ce0",
				"8eee8bed-1528-2daf-8104-9449d0dc0f53"
			],
			"collection_name": "Intelligence API",
			"collection_id": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"owner": 0
		},
		{
			"id": "8c836835-6b6e-59ef-1c40-bc3ede697ae7",
			"name": "Sports",
			"description": "",
			"order": [
				"16393327-aadf-73e4-52fa-234e9658b386",
				"777c4e61-548d-f826-1b96-22b98915ae93"
			],
			"collection_name": "Intelligence API",
			"collection_id": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"owner": 0
		},
		{
			"id": "3672b2cc-aaa2-cecc-d299-8ca2f38c14d8",
			"name": "TagSets",
			"description": "",
			"order": [
				"4524b01c-670d-0609-2a38-75b9371b2ffd",
				"ac27d94c-5604-4980-acaa-c144d2b8103b"
			],
			"collection_name": "Intelligence API",
			"collection_id": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"owner": 0
		},
		{
			"id": "47d1078a-0d0e-7217-5379-1361f0a58a3a",
			"name": "Teams",
			"description": "",
			"order": [
				"325d2425-b3c1-0cdf-b346-2f9edb36024d",
				"dd85cf29-768f-4470-28be-88787ec57c31",
				"4fd17ecc-599d-9258-0a77-3165da474218",
				"759adcd4-fb72-73bc-67f5-c91d750f9dc6",
				"c433714d-f310-f00b-6998-315aedb9c911"
			],
			"collection_name": "Intelligence API",
			"collection_id": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"owner": 0
		},
		{
			"id": "83203dc7-1995-cd05-7d2f-dc99c22e4074",
			"name": "Users",
			"description": "",
			"order": [
				"741d03d2-302e-48d1-7d0f-ea7a3ed3f12c",
				"77b1e832-9269-deff-b3d9-da97685c3bab",
				"e2c84b78-7bf4-0f9b-38b4-99a3a5a3e84e",
				"d370867e-784f-70f2-d515-6c183cefa66f",
				"7e0a1fda-6e59-c901-c2c9-dfaacca27724"
			],
			"collection_name": "Intelligence API",
			"collection_id": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"owner": 0
		}
	],
	"timestamp": 1393523475382,
	"synced": false,
	"remoteLink": "https://www.getpostman.com/collections/338ecdbe7d5b1344a332",
	"owner": 0,
	"sharedWithTeam": false,
	"subscribed": false,
	"hasRequests": true,
	"requests": [
		{
			"id": "0662bb5f-7e93-c8b6-2506-c3ccf3d7c63f",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/plays?gameId={{gameId}}&reelId={{reelId}}",
			"preRequestScript": "var start = postman.getEnvironmentVariable(\"start\");\nif (!start) postman.setEnvironmentVariable(\"start\", 0);\n\nvar count = postman.getEnvironmentVariable(\"count\");\nif (!count) postman.setEnvironmentVariable(\"count\", 100);\n\nvar gameId = postman.getEnvironmentVariable(\"gameId\");\nif (!gameId) postman.setEnvironmentVariable(\"gameId\", 1);\n\nvar reelId = postman.getEnvironmentVariable(\"reelId\");\nif (!reelId) postman.setEnvironmentVariable(\"reelId\", 1);",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421599864666,
			"name": "Filter",
			"description": "- **{{gameId}}** _{Integer}_ game ID\n\n- **{{reelId}}** _{Integer}_ reel ID\n",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "7a9a0085-b8e1-f6d2-ad18-3437a9418e4b"
		},
		{
			"id": "074ffc78-4d92-8631-2465-665126d1eff4",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/players",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var playerSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Player Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"firstName\": {\n            \"type\": \"string\"\n        },\n        \"lastName\": {\n            \"type\": \"string\"\n        },\n        \"userId\": {\n            \"type\": [\"integer\", \"null\"]\n        },\n        \"isUnknown\": {\n            \"type\": \"boolean\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\nvar players = JSON.parse(responseBody);\n\ntests[\"Players conform to schema\"] = players.every(function(player) {\n\n    var result = tv4.validateMultiple(player, playerSchema);\n\n    if (result.missing.length) console.log('Missing schema(s) ' + result.missing);\n\n    if (result.errors.length) result.errors.forEach(function(error) {\n    \n        console.log(error.message + ' at ' + error.dataPath); \n    });\n    \n    return result.valid;\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421764981240,
			"name": "Query",
			"description": "Endpoint used to get all players.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "ac529f43-f032-0d4c-c0bd-82de246ac58d"
		},
		{
			"id": "0f486c58-a204-d386-b426-06855cb69bff",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/players?start={{start}}&count={{count}}&firstName={{firstName}}&lastName={{lastName}}&rosterId={{rosterId}}&reelId={{reelId}}&userId={{userId}}",
			"preRequestScript": "var start = postman.getEnvironmentVariable(\"start\");\nif (!start) postman.setEnvironmentVariable(\"start\", 0);\n\nvar count = postman.getEnvironmentVariable(\"count\");\nif (!count) postman.setEnvironmentVariable(\"count\", 100);\n\nvar name = postman.getEnvironmentVariable(\"name\");\nif (!name) postman.setEnvironmentVariable(\"name\", '');\n\nvar gender = postman.getEnvironmentVariable(\"gender\");\nif (!gender) postman.setEnvironmentVariable(\"gender\", 'male');\n\nvar sportId = postman.getEnvironmentVariable(\"sportId\");\nif (!sportId) postman.setEnvironmentVariable(\"sportId\", 1);\n",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421587777941,
			"name": "Filter",
			"description": "- **{{start}}** _{Integer}_ offset to start results from\n\n- **{{count}}** _{Integer}_ number of results\n\n- **{{firstName}}** _{String}_ first name\n\n- **{{lastName}}** _{String}_ first name\n\n- **{{rosterId}}** _{Integer}_ roster ID\n\n- **{{reelId}}** _{Integer}_ reel ID\n\n- **{{userId}}** _{Integer}_ user ID\n",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "ac529f43-f032-0d4c-c0bd-82de246ac58d"
		},
		{
			"id": "11243d3a-2fa3-1ae2-6637-fd07bf20255c",
			"headers": "Authorization: Bearer {{access_token}}\nContent-Type: application/json\n",
			"url": "{{url}}/{{version}}/reels/{{reelId}}",
			"preRequestScript": "var reelId = postman.getEnvironmentVariable(\"reelId\");\nif (!reelId) postman.setEnvironmentVariable(\"reelId\", 1);",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421611015061,
			"name": "Update",
			"description": "",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"rawModeData": "{\"id\":1,\"name\":\"Test\",\"uploaderUserId\":1,\"uploaderTeamId\":1,\"createdAt\":\"2015-01-18T19:55:56+00:00\",\"updatedAt\":\"2015-01-18T19:55:56+00:00\",\"plays\":[1],\"isDeleted\":false}",
			"owner": 0,
			"folder": "7dce73db-ccb6-da13-1e7b-f6d96fa0faa9"
		},
		{
			"id": "16393327-aadf-73e4-52fa-234e9658b386",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/sports/{{sportId}}",
			"preRequestScript": "var sportId = postman.getEnvironmentVariable(\"sportId\");\nif (!sportId) postman.setEnvironmentVariable(\"sportId\", 1);",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var sport = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable(\"sportId\", sport.id);\n\nvar sportSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Sport Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\nvar sport = JSON.parse(responseBody);\n\nvar result = tv4.validateMultiple(sport, sportSchema);\n\ntests[\"Sport conforms to schema\"] = result.valid;\n\nif (result.missing.length) console.log('Missing schema(s) ' + result.missing);\n\nif (result.errors.length) result.errors.forEach(function(error) {\n    \n   console.log(error.message + ' at ' + error.dataPath); \n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421765327362,
			"name": "Get",
			"description": "Retrieve a single sport object.\n\n_{{sportId}}_ is a sport ID",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "8c836835-6b6e-59ef-1c40-bc3ede697ae7"
		},
		{
			"id": "20d7fbbb-5562-c15d-9b73-729c11cc8d30",
			"headers": "Authorization: Bearer {{access_token}}\nContent-Type: application/json\n",
			"url": "{{url}}/{{version}}/games",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var game = JSON.parse(responseBody);\n\npostman.setGlobalVariable(\"gameId\", game.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421610518174,
			"name": "Create",
			"description": "Add a new game",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"rawModeData": "{\n  \"datePlayed\":\"2013-11-15T23:00:00+00:00\",\n  \"gameType\":1,\n  \"isHomeGame\":false,\n  \"teamId\":2,\n  \"opposingTeamId\":3,\n  \"primaryJerseyColor\":\"#ffff00\",\n  \"opposingPrimaryJerseyColor\":\"#804040\",\n  \"opposingSecondaryJerseyColor\":\"#ffffff\",\n  \"finalScore\":2,\n  \"opposingFinalScore\":3,\n  \"isDeleted\":false,\n  \"uploaderUserId\":13,\n  \"uploaderTeamId\":2,\n  \"createdAt\":\"2014-07-14T20:54:45+00:00\",\n  \"isClone\":false,\n  \"notes\":{}\n}",
			"owner": 0,
			"folder": "f223d77a-3509-7b26-5ceb-50dbb9aa594a"
		},
		{
			"id": "325d2425-b3c1-0cdf-b346-2f9edb36024d",
			"headers": "Authorization: Bearer {{access_token}}\nContent-Type: application/json\n",
			"url": "{{url}}/{{version}}/teams",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\n\npostman.setGlobalVariable(\"teamId\", data.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1420439083340,
			"name": "Create",
			"description": "",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"rawModeData": "{\"name\":\"Golden Shield\",\"leagueId\":1,\"schoolId\":1,\"address\":{\"street1\":\"1400 Barry Downe Rd\",\"city\":\"Greater Sudbury\",\"regionCode\":\"ON\",\"postalCode\":\"P3A 3V8\",\"countryCode\":\"CN\"}}",
			"owner": 0,
			"folder": "47d1078a-0d0e-7217-5379-1361f0a58a3a"
		},
		{
			"id": "3d84bf56-cbe0-0ee3-afa1-8146e0652cf6",
			"headers": "Authorization: Bearer {{access_token}}\nContent-Type: application/json\n",
			"url": "{{url}}/{{version}}/plays",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\n\npostman.setGlobalVariable(\"gameId\", data.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1420429984133,
			"name": "Create",
			"description": "Add a new play.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"rawModeData": "{\n  \"startTime\": 0,\n  \"endTime\": 0,\n  \"events\": [{\n      \"time\": 0,\n      \"tagId\": 16,\n      \"playId\": 1,\n\t  \"variableValues\":{\n    \t\"7\":{\n    \t\t\"id\":7,\n    \t\t\"type\":null,\n    \t\t\"value\":\"1\"\n    \t}\n      }\n  }],\n  \"gameId\": 1\n}",
			"owner": 0,
			"folder": "7a9a0085-b8e1-f6d2-ad18-3437a9418e4b"
		},
		{
			"id": "41c4faff-a5a9-a9ab-d70d-244321f458d2",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/reels",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421610615890,
			"name": "Query",
			"description": "Endpoint used to get all reels and to search for reels using Query String filters.  If no filters are passed, it will return an array of all reels.  Start and Count  are used to control how many results are returned and from what offset.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "7dce73db-ccb6-da13-1e7b-f6d96fa0faa9"
		},
		{
			"id": "4524b01c-670d-0609-2a38-75b9371b2ffd",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/tag-sets/{{tagSetId}}",
			"preRequestScript": "var sportId = postman.getEnvironmentVariable(\"tagSetId\");\nif (!sportId) postman.setEnvironmentVariable(\"tagSetId\", 1);",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var tagset = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable(\"tagSetId\", tagset.id);\n\nvar tagSetSchema = {\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"TagSet Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"tags\": {\n            \"type\": \"array\",\n            \"items\": { \"$ref\": \"tag\" }\n        }\n    },\n    \"additionalProperties\": false\n};\n\nvar tagSchema = {\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Tag Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"description\": {\n            \"type\": \"string\"\n        },\n        \"shortcutKey\": {\n            \"type\": \"string\"\n        },      \n        \"userScript\": {\n            \"type\": [\"string\", \"null\"]\n        },\n        \"indexerScript\": {\n            \"type\": \"string\"\n        },\n        \"summaryScript\": {\n            \"type\": [\"string\", \"null\"]\n        },\n        \"summaryPriority\": {\n            \"type\": [\"integer\", \"null\"]\n        },\n        \"pointsAssigned\": {\n            \"type\": [\"integer\", \"null\"]\n        },\n        \"assignThisTeam\": {\n            \"type\": [\"boolean\", \"null\"]\n        },\n        \"buffer\": {\n            \"type\": [\"number\", \"null\"]\n        },\n        \"isStart\": {\n            \"type\": \"boolean\"\n        },\n        \"isEnd\": {\n            \"type\": \"boolean\"\n        },\n        \"isPeriodTag\": {\n            \"type\": \"boolean\"\n        },\n        \"tagSetId\": {\n            \"type\": \"integer\"\n        },\n        \"children\": {\n            \"type\": \"array\",\n            \"items\": { \"type\": \"integer\" }\n        },\n        \"tagVariables\": {\n            \"type\": \"array\",\n            \"items\": { \"$ref\": \"tagVariable\" }\n        }\n    },\n    \"additionalProperties\": false\n};\n\nvar tagVariableSchema = {\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Tag Variable Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"type\": {\n            \"type\": \"string\"\n        },\n        \"isRequired\": {\n            \"type\": \"boolean\"\n        },\n        // FIXME: tag.tagVariable.options should never be a string\n        \"options\": {\n            \"type\": [\"array\", \"string\"]\n        },\n        \"formations\": {\n            \"type\": \"array\"\n        }\n    },\n    \"additionalProperties\": false\n};\n\ntv4.addSchema('tag', tagSchema);\ntv4.addSchema('tagVariable', tagVariableSchema);\n\nvar tagset = JSON.parse(responseBody);\n\nvar result = tv4.validateMultiple(tagset, tagSetSchema);\n\ntests[\"Tag-Set conforms to schema\"] = result.valid;\n\nif (result.missing.length) console.log('Missing schema(s) ' + result.missing);\n\nif (result.errors.length) result.errors.forEach(function(error) {\n    \n   console.log(error.message + ' at ' + error.dataPath); \n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421765396351,
			"name": "Get",
			"description": "Retrieve a single tag set object.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "3672b2cc-aaa2-cecc-d299-8ca2f38c14d8"
		},
		{
			"id": "45bc9696-cba3-3b77-4f28-038ce3ef4bab",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/leagues/{{leagueId}}",
			"preRequestScript": "var leagueId = postman.getEnvironmentVariable(\"leagueId\");\nif (!leagueId) postman.setEnvironmentVariable(\"leagueId\", 1);",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var league = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable(\"leagueId\", league.id);\n\nvar leagueSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"League Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"sportId\": {\n            \"type\": \"integer\"\n        },\n        \"gender\": {\n            \"type\": \"string\",\n            \"options\": [\n                \"male\",\n                \"female\"\n            ]\n        },\n        \"seasonStartMonth\": {\n            \"type\": \"integer\"\n        },\n        \"seasonStartDay\": {\n            \"type\": \"integer\"\n        },\n        \"seasonEndMonth\": {\n            \"type\": \"integer\"\n        },\n        \"seasonEndDay\": {\n            \"type\": \"integer\"\n        },\n        \"seasons\": {\n            \"type\": \"array\",\n            \"items\": { \"$ref\": \"season\" }\n        },\n        \"tagSetId\": {\n            \"type\": [\"null\", \"integer\"]\n        },\n        \"numberOfPeriods\": {\n            \"type\": \"integer\"\n        },\n        \"periodLabel\": {\n            \"type\": \"string\"\n        },\n        \"periodAbbreviationLabel\": {\n            \"type\": \"string\"\n        },\n        \"positionSetId\": {\n            \"type\": [\"null\", \"integer\"]\n        },\n        \"flagRuleSetId\": {\n            \"type\": [\"null\", \"integer\"]\n        },\n        \"filterSetId\": {\n            \"type\": [\"null\", \"integer\"]\n        }\n    },\n    \"additionalProperties\": false\n}\n\nvar seasonSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Season Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"leagueId\": {\n            \"type\": \"integer\"\n        },\n        \"startDate\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"endDate\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\ntv4.addSchema('season', seasonSchema);\n          \ntv4.addFormat('date-time', function(data, schema) {\n\n    var ISO8601 = /[0-9]{4,}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(?:\\.[0-9]+|)(?:[+-][0-9]{2}:[0-9]{2}|Z)/;\n\n    if (ISO8601.test(data) && !isNaN(Date.parse(data))) return null;\n\n    else return 'A valid ISO 8601 date/time string expected';\n});\n\n\nvar league = JSON.parse(responseBody);\n\nvar result = tv4.validateMultiple(league, leagueSchema);\n\ntests[\"League conforms to schema\"] = result.valid;\n\nif (result.missing.length) console.log('Missing schema(s) ' + result.missing);\n\nif (result.errors.length) result.errors.forEach(function(error) {\n    \n   console.log(error.message + ' at ' + error.dataPath); \n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1422155018499,
			"name": "Get",
			"description": "Endpoint used to retrieve a single league based on ID.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "cce060d0-b1bd-27d8-5fb6-ef2a5a60570c"
		},
		{
			"id": "47654c08-ef14-4782-87a2-a748b640fd85",
			"headers": "Authorization: Bearer {{access_token}}\nContent-Type: application/json\n",
			"url": "{{url}}/{{version}}/plans/{{planId}}",
			"preRequestScript": "var planId = postman.getEnvironmentVariable(\"planId\");\nif (!planId) postman.setEnvironmentVariable(\"planId\", 5);",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1420428941495,
			"name": "Update",
			"description": "Update an existing plan object.\n\n- **{{planId}}** _{Integer}_ the ID of the default plan to update.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"rawModeData": "{\"leagueIds\":[1,2,5,6,9,7],\"startDay\":1,\"startMonth\":7,\"endDay\":1,\"endMonth\":1,\"id\":5,\"name\":\"Franchise\",\"maxGamesPerPlan\":20,\"maxAnyGames\":2,\"maxTurnaroundTime\":48,\"price\":0}",
			"owner": 0,
			"folder": "c8056818-8157-7a05-efbb-45eb8eee9180"
		},
		{
			"id": "47e73311-ab16-9580-6c11-3e6f4b6d4803",
			"headers": "Authorization: Bearer {{access_token}}\nContent-Type: application/json\n",
			"url": "{{url}}/{{version}}/games/{{gameId}}",
			"preRequestScript": "var gameId = postman.getEnvironmentVariable(\"gameId\");\nif (!gameId) postman.setEnvironmentVariable(\"gameId\", 1);",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1420427581883,
			"name": "Update",
			"description": "",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"rawModeData": "{\"id\":1,\"datePlayed\":\"2013-11-15T23:00:00+00:00\",\"gameType\":1,\"isHomeGame\":false,\"teamId\":2,\"opposingTeamId\":3,\"primaryJerseyColor\":\"#ffff00\",\"opposingPrimaryJerseyColor\":\"#804040\",\"opposingSecondaryJerseyColor\":\"#ffffff\",\"finalScore\":2,\"opposingFinalScore\":3,\"rosters\":{\"2\":{\"id\":4,\"gameId\":1,\"teamId\":2,\"playerInfo\":{\"1\":{\"jerseyNumber\":\"6\",\"isActive\":true,\"positionIds\":[6]},\"2\":{\"jerseyNumber\":\"17\",\"isActive\":false,\"positionIds\":[2,7]},\"3\":{\"jerseyNumber\":\"20\",\"isActive\":true,\"positionIds\":[4]},\"4\":{\"jerseyNumber\":\"15\",\"isActive\":false,\"positionIds\":[1]},\"5\":{\"jerseyNumber\":\"14\",\"isActive\":false,\"positionIds\":[5]},\"6\":{\"jerseyNumber\":\"10\",\"isActive\":false,\"positionIds\":[4,5,6]},\"7\":{\"jerseyNumber\":\"19\",\"isActive\":true,\"positionIds\":[5]},\"8\":{\"jerseyNumber\":\"7\",\"isActive\":false,\"positionIds\":[4,5]},\"9\":{\"jerseyNumber\":\"2\",\"isActive\":true,\"positionIds\":[1]},\"10\":{\"jerseyNumber\":\"9\",\"isActive\":true,\"positionIds\":[4,5]},\"11\":{\"jerseyNumber\":\"16\",\"isActive\":false,\"positionIds\":[1]},\"12\":{\"jerseyNumber\":\"5\",\"isActive\":true,\"positionIds\":[1]},\"13\":{\"jerseyNumber\":\"4\",\"isActive\":true,\"positionIds\":[2]},\"14\":{\"jerseyNumber\":\"18\",\"isActive\":false,\"positionIds\":[2,7]},\"15\":{\"jerseyNumber\":\"11\",\"isActive\":true,\"positionIds\":[4]},\"16\":{\"jerseyNumber\":\"3\",\"isActive\":true,\"positionIds\":[2,7]},\"17\":{\"jerseyNumber\":\"1\",\"isActive\":false,\"positionIds\":[6]},\"18\":{\"jerseyNumber\":\"12\",\"isActive\":true,\"positionIds\":[6]},\"19\":{\"jerseyNumber\":\"\",\"isActive\":true}}},\"3\":{\"id\":5,\"gameId\":1,\"teamId\":3,\"playerInfo\":{\"20\":{\"jerseyNumber\":\"\",\"isActive\":true},\"21\":{\"jerseyNumber\":\"1\",\"isActive\":true},\"22\":{\"jerseyNumber\":\"4\",\"isActive\":true},\"23\":{\"jerseyNumber\":\"6\",\"isActive\":true},\"24\":{\"jerseyNumber\":\"10\",\"isActive\":true},\"25\":{\"jerseyNumber\":\"11\",\"isActive\":true},\"26\":{\"jerseyNumber\":\"17\",\"isActive\":true},\"27\":{\"jerseyNumber\":\"8\",\"isActive\":true},\"28\":{\"jerseyNumber\":\"14\",\"isActive\":true},\"29\":{\"jerseyNumber\":\"18\",\"isActive\":true},\"30\":{\"jerseyNumber\":\"22\",\"isActive\":true},\"31\":{\"jerseyNumber\":\"24\",\"isActive\":true}}}},\"video\":{\"id\":1,\"guid\":\"ec2-54-90-109-171.compute-1.amazonaws.com53c478d27cfac\",\"status\":4,\"videoTranscodeProfiles\":[{\"id\":7,\"videoId\":1,\"transcodeProfile\":{\"id\":1,\"targetBitrate\":600,\"maximumBitrate\":800,\"minimumBitrate\":0,\"description\":\"SD Low Resolution (360p)\",\"targetDisplayWidth\":640,\"targetDisplayHeight\":360,\"aspectRatio\":\"16:9\"},\"status\":4,\"videoUrl\":\"http:\\/\\/krossover-com-prod-content.cdn.krossover.com\\/videos\\/finished\\/ec2-54-90-109-171.compute-1.amazonaws.com53c478d27cfac_600.mp4\"},{\"id\":8,\"videoId\":1,\"transcodeProfile\":{\"id\":2,\"targetBitrate\":1600,\"maximumBitrate\":1900,\"minimumBitrate\":1000,\"description\":\"SD High Resolution (480p)\",\"targetDisplayWidth\":848,\"targetDisplayHeight\":480,\"aspectRatio\":\"16:9\"},\"status\":4,\"videoUrl\":\"http:\\/\\/krossover-com-prod-content.cdn.krossover.com\\/videos\\/finished\\/ec2-54-90-109-171.compute-1.amazonaws.com53c478d27cfac_1600.mp4\"},{\"id\":9,\"videoId\":1,\"transcodeProfile\":{\"id\":3,\"targetBitrate\":3500,\"maximumBitrate\":5000,\"minimumBitrate\":2400,\"description\":\"HD Resolution (720p)\",\"targetDisplayWidth\":1280,\"targetDisplayHeight\":720,\"aspectRatio\":\"16:9\"},\"status\":4,\"videoUrl\":\"http:\\/\\/krossover-com-prod-content.cdn.krossover.com\\/videos\\/finished\\/ec2-54-90-109-171.compute-1.amazonaws.com53c478d27cfac_3500.mp4\"}],\"duration\":7500,\"thumbnail\":\"http:\\/\\/krossover-com-prod-content.cdn.krossover.com\\/images\\/thumbnails\\/ec2-54-90-109-171.compute-1.amazonaws.com53c478d27cfac_3500.jpg\"},\"status\":7,\"indexerAssignments\":[{\"id\":1,\"gameId\":1,\"userId\":5,\"timeAssigned\":\"2014-07-15T08:09:10+00:00\",\"timeStarted\":\"2014-07-15T08:09:28+00:00\",\"timeFinished\":\"2014-07-16T08:42:44+00:00\",\"deadline\":\"2014-07-17T08:09:08+00:00\",\"isQa\":false},{\"id\":5,\"gameId\":1,\"userId\":5,\"timeAssigned\":\"2014-07-16T08:52:33+00:00\",\"timeStarted\":\"2014-07-16T08:52:45+00:00\",\"timeFinished\":\"2014-07-16T11:09:54+00:00\",\"deadline\":\"2014-07-18T08:52:31+00:00\",\"isQa\":true}],\"isDeleted\":false,\"uploaderUserId\":13,\"uploaderTeamId\":2,\"createdAt\":\"2014-07-14T20:54:45+00:00\",\"isClone\":false,\"notes\":{\"1\":[{\"id\":1,\"noteTypeId\":1,\"gameId\":1,\"content\":\"Our starting Setter for this match was #2- Kyana Miller. Our other Setter for this match (we ran a 6-2 offense) was #5- Aimee Schubert.\",\"gameTime\":null}],\"2\":[{\"id\":4,\"noteTypeId\":2,\"gameId\":1,\"content\":\"College of Charleston #5 not listed on roster.\",\"gameTime\":2400},{\"id\":7,\"noteTypeId\":2,\"gameId\":1,\"content\":\"College of Charleston #3 not listed on roster.\",\"gameTime\":7200},{\"id\":8,\"noteTypeId\":2,\"gameId\":1,\"content\":\"Injury occurs here. The play is whistled dead.\",\"gameTime\":7500},{\"id\":9,\"noteTypeId\":2,\"gameId\":1,\"content\":\"Gap in film\",\"gameTime\":7500},{\"id\":10,\"noteTypeId\":2,\"gameId\":1,\"content\":\"The game film ends in the middle of 5th set.\",\"gameTime\":7500}]}}",
			"owner": 0,
			"folder": "f223d77a-3509-7b26-5ceb-50dbb9aa594a"
		},
		{
			"id": "48ba2891-2850-3d89-f1f5-0633de7b3c8e",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/position-sets/{{positionSetId}}",
			"preRequestScript": "var playId = postman.getEnvironmentVariable(\"positionSetId\");\nif (!playId) postman.setEnvironmentVariable(\"positionSetId\", 1);",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var positionSetSchema = {\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"PositionSet Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"positions\": {\n            \"type\": \"array\",\n            \"items\": { \"$ref\": \"position\" }\n        }\n    },\n    \"additionalProperties\": false\n};\n\nvar positionSchema = {\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Position Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"description\": {\n            \"type\": \"string\"\n        },\n        \"positionSetId\": {\n            \"type\": \"integer\"\n        }\n    },\n    \"additionalProperties\": false\n};\n\ntv4.addSchema('position', positionSchema);\n\nvar positionset = JSON.parse(responseBody);\n\nvar result = tv4.validateMultiple(positionset, positionSetSchema);\n\ntests[\"Position-Set conforms to schema\"] = result.valid;\n\nif (result.missing.length) console.log('Missing schema(s) ' + result.missing);\n\nif (result.errors.length) result.errors.forEach(function(error) {\n    \n   console.log(error.message + ' at ' + error.dataPath); \n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421765069477,
			"name": "Get",
			"description": "Retrieve a single position set object.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "d4cad1f1-5618-c812-fb6b-8104cce33f08"
		},
		{
			"id": "4cb464a9-8bb8-74c1-175e-de8374b76dd9",
			"headers": "Authorization: Bearer {{access_token}}\nContent-Type: application/json\n",
			"url": "{{url}}/{{version}}/reels",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var reel = JSON.parse(responseBody);\n\npostman.setGlobalVariable(\"reelId\", reel.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421610934230,
			"name": "Create",
			"description": "Add a new reel",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"rawModeData": "{\n  \"name\":\"Test\",\n  \"uploaderUserId\":1,\n  \"uploaderTeamId\":1,\n  \"plays\":[1]\n}",
			"owner": 0,
			"folder": "7dce73db-ccb6-da13-1e7b-f6d96fa0faa9"
		},
		{
			"id": "4fd17ecc-599d-9258-0a77-3165da474218",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/teams",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1420438887778,
			"name": "Query",
			"description": "Get all teams.\n",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "47d1078a-0d0e-7217-5379-1361f0a58a3a"
		},
		{
			"id": "5315b0ef-778d-1d43-05ae-0cd1a95e7dea",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/plans",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var plan = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable(\"planId\", plan.id);\n\nvar defaultPlanSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Default Plan Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"leagueIds\": {\n            \"type\": \"array\",\n            \"items\": \"integer\"\n        },\n        \"startDay\": {\n            \"type\": \"integer\"\n        },\n        \"startMonth\": {\n            \"type\": \"integer\"\n        },\n        \"endDay\": {\n            \"type\": \"integer\"\n        },\n        \"endMonth\": {\n            \"type\": \"integer\"\n        },\n        \"maxGamesPerPlan\": {\n            \"type\": \"integer\"\n        },\n        \"maxAnyGames\": {\n            \"type\": \"integer\"\n        },\n        \"maxTurnaroundTime\": {\n            \"type\": \"integer\"\n        },\n        \"price\": {\n            \"type\": \"integer\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\nvar plans = JSON.parse(responseBody);\n\ntests[\"Plans conform to schema\"] = plans.every(function(plan) {\n\n    var result = tv4.validateMultiple(plan, defaultPlanSchema);\n\n    if (result.missing.length) console.log('Missing schema(s) ' + result.missing);\n\n    if (result.errors.length) result.errors.forEach(function(error) {\n    \n        console.log(error.message + ' at ' + error.dataPath); \n    });\n    \n    return result.valid;\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421764859041,
			"name": "Query",
			"description": "Endpoint used to get all plans.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "c8056818-8157-7a05-efbb-45eb8eee9180"
		},
		{
			"id": "5438a38c-a553-e8a8-15ab-517cf13eb30e",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/plans/{{planId}}",
			"preRequestScript": "var planId = postman.getEnvironmentVariable(\"planId\");\nif (!planId) postman.setEnvironmentVariable(\"planId\", 5);",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var plan = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable(\"planId\", plan.id);\n\nvar defaultPlanSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"DefaultPlan Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"leagueIds\": {\n            \"type\": \"array\",\n            \"items\": \"integer\"\n        },\n        \"startDay\": {\n            \"type\": \"integer\"\n        },\n        \"startMonth\": {\n            \"type\": \"integer\"\n        },\n        \"endDay\": {\n            \"type\": \"integer\"\n        },\n        \"endMonth\": {\n            \"type\": \"integer\"\n        },\n        \"maxGamesPerPlan\": {\n            \"type\": \"integer\"\n        },\n        \"maxAnyGames\": {\n            \"type\": \"integer\"\n        },\n        \"maxTurnaroundTime\": {\n            \"type\": \"integer\"\n        },\n        \"price\": {\n            \"type\": \"integer\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\nvar plan = JSON.parse(responseBody);\n\nvar result = tv4.validateMultiple(plan, defaultPlanSchema);\n\ntests[\"Plan conforms to schema\"] = result.valid;\n\nif (result.missing.length) console.log('Missing schema(s) ' + result.missing);\n\nif (result.errors.length) result.errors.forEach(function(error) {\n    \n   console.log(error.message + ' at ' + error.dataPath); \n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421764736954,
			"name": "Get",
			"description": "Endpoint used to retrieve a single plan based on ID.\n\n- **{{planId}}** _{Integer}_ the ID of the default plan to get.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "c8056818-8157-7a05-efbb-45eb8eee9180"
		},
		{
			"id": "55536021-6ba7-0634-fff6-4168d11b4d98",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/leagues",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var leagueSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"League Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"sportId\": {\n            \"type\": \"integer\"\n        },\n        \"gender\": {\n            \"type\": \"string\",\n            \"options\": [\n                \"male\",\n                \"female\"\n            ]\n        },\n        \"seasonStartMonth\": {\n            \"type\": \"integer\"\n        },\n        \"seasonStartDay\": {\n            \"type\": \"integer\"\n        },\n        \"seasonEndMonth\": {\n            \"type\": \"integer\"\n        },\n        \"seasonEndDay\": {\n            \"type\": \"integer\"\n        },\n        \"seasons\": {\n            \"type\": \"array\",\n            \"items\": { \"$ref\": \"season\" }\n        },\n        \"tagSetId\": {\n            \"type\": [\"null\", \"integer\"]\n        },\n        \"numberOfPeriods\": {\n            \"type\": \"integer\"\n        },\n        \"periodLabel\": {\n            \"type\": \"string\"\n        },\n        \"periodAbbreviationLabel\": {\n            \"type\": \"string\"\n        },\n        \"positionSetId\": {\n            \"type\": [\"null\", \"integer\"]\n        },\n        \"flagRuleSetId\": {\n            \"type\": [\"null\", \"integer\"]\n        },\n        \"filterSetId\": {\n            \"type\": [\"null\", \"integer\"]\n        }\n    },\n    \"additionalProperties\": false\n}\n\nvar seasonSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Season Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"leagueId\": {\n            \"type\": \"integer\"\n        },\n        \"startDate\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"endDate\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\ntv4.addSchema('season', seasonSchema);\n          \ntv4.addFormat('date-time', function(data, schema) {\n\n    var ISO8601 = /[0-9]{4,}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(?:\\.[0-9]+|)(?:[+-][0-9]{2}:[0-9]{2}|Z)/;\n\n    if (ISO8601.test(data) && !isNaN(Date.parse(data))) return null;\n\n    else return 'A valid ISO 8601 date/time string expected';\n});\n\n\nvar leagues = JSON.parse(responseBody);\n\ntests[\"Leagues conform to schema\"] = leagues.every(function(league) {\n\n    var result = tv4.validateMultiple(league, leagueSchema);\n\n    if (result.missing.length) console.log('Missing schema(s) ' + result.missing);\n\n    if (result.errors.length) result.errors.forEach(function(error) {\n    \n        console.log(error.message + ' at ' + error.dataPath); \n    });\n    \n    return result.valid;\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1422155073092,
			"name": "Query",
			"description": "Endpoint used to get all leagues and to search for leagues using Query String filters.  If no filters are passed, it will return an array of all leagues.  Start and Count  are used to control how many results are returned and from what offset.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "cce060d0-b1bd-27d8-5fb6-ef2a5a60570c"
		},
		{
			"id": "5ae07c47-e982-040c-4566-b6f194a52f3a",
			"headers": "",
			"url": "{{url}}/oauth/authorize?response_type=code&client_id=cid&state=xyz",
			"pathVariables": {},
			"method": "POST",
			"data": [
				{
					"key": "authorized",
					"value": "yes",
					"type": "text"
				},
				{
					"key": "username",
					"value": "{{username}}",
					"type": "text"
				},
				{
					"key": "password",
					"value": "{{password}}",
					"type": "text"
				}
			],
			"dataMode": "urlencoded",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable(\"code\", data.code);",
			"time": 1393513890505,
			"name": "Authorize",
			"description": "",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"preRequestScript": "",
			"folder": "6a1d90bd-fc67-c613-939a-beaa91a77436"
		},
		{
			"id": "640edafe-a8aa-314b-dea1-bcbd04751c33",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/schools/{{schoolId}}",
			"preRequestScript": "var schoolId = postman.getEnvironmentVariable(\"schoolId\");\nif (!schoolId) postman.setEnvironmentVariable(\"schoolId\", 1);",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var school = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable(\"schoolId\", school.id);\n\nvar schoolSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"School Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"address\": { \"$ref\": \"address\" },\n        \"conference\": {\n            \"type\": [\"null\", \"string\"]\n        },\n        \"division\": {\n            \"type\": [\"null\", \"string\"]\n        },\n        \"mascot\": {\n            \"type\": [\"null\", \"string\"]\n        }\n    },\n    \"additionalProperties\": true\n}\n\nvar addressSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Address Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"street1\": {\n            \"type\": [\"null\", \"string\"]\n        },\n        \"street2\": {\n            \"type\": [\"null\", \"string\"]\n        },\n        \"city\": {\n            \"type\": \"string\"\n        },\n        \"regionCode\": {\n            \"type\": \"string\"\n        },\n        \"postalCode\": {\n            \"type\": \"string\"\n        },\n        \"countryCode\": {\n            \"type\": \"string\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\ntv4.addSchema('address', addressSchema);\n\nvar school = JSON.parse(responseBody);\n\nvar result = tv4.validateMultiple(school, schoolSchema);\n\ntests[\"School conforms to schema\"] = result.valid;\n\nif (result.missing.length) console.log('Missing schema(s) ' + result.missing);\n\nif (result.errors.length) result.errors.forEach(function(error) {\n    \n   console.log(error.message + ' at ' + error.dataPath); \n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421765221931,
			"name": "Get",
			"description": "Retrieve a single school object.\n\n_{{schoolId}}_ is a school ID",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "0953f8a0-9750-28c6-d2b5-12fd90aec3fd"
		},
		{
			"id": "684a4215-3fb7-7cd0-92e7-6b98f3bab385",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/plays/1",
			"preRequestScript": "var playId = postman.getEnvironmentVariable(\"playId\");\nif (!playId) postman.setEnvironmentVariable(\"playId\", 1);",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var play = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable(\"playId\", play.id);\n\nvar playSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Play Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"startTime\": {\n            \"type\": \"number\"\n        },\n        \"endTime\": {\n            \"type\": \"number\"\n        },\n        \"events\": {\n            \"type\": \"array\",\n            \"items\": { \"$ref\": \"event\" }\n        },\n        \"gameId\": {\n            \"type\": \"integer\"\n        },\n        \"flags\": {\n            \"type\": \"array\"\n        },\n        \"clip\": {\n            \"type\": [\"null\", \"object\"],\n            \"items\": { \"$ref\": \"video\" }\n        },\n        \"shares\": {\n            \"type\": \"array\",\n            \"items\": { \"$ref\": \"share\" }\n        },\n    },\n    \"additionalProperties\": false\n}\n\nvar eventSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Event Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"time\": {\n            \"type\": \"number\"\n        },\n        \"tagId\": {\n            \"type\": \"integer\"\n        },\n        \"playId\": {\n            \"type\": \"integer\"\n        },\n        \"variableValues\": {\n            \"patternProperties\": {\n                \"[0-9]\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"type\": {\n                            \"type\": [\"null\", \"string\"],\n                            \"options\": [\"null\", \"Team\", \"Player\"]\n                        },\n                        \"value\": {\n                            \"type\": [\"integer\", \"string\"]\n                        }\n                    }\n                }\n            }\n        }\n    },\n    \"additionalProperties\": false\n}\n\nvar videoSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Video Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"guid\": {\n            \"type\": \"string\"\n        },\n        \"status\": {\n            \"type\": \"integer\"\n        },\n        \"videoTranscodeProfiles\": {\n            \"type\": \"array\",\n            \"items\": { \"$ref\": \"transcodeProfile\" }\n        },\n        \"duration\": {\n            \"type\": \"integer\"\n        },\n        \"thumbnail\": {\n            \"type\": \"string\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\nvar shareSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Share Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"userId\": {\n            \"type\": \"integer\"\n        },\n        \"gameId\": {\n            \"type\": \"integer\"\n        },\n        \"reelId\": {\n            \"type\": \"integer\"\n        },\n        \"playId\": {\n            \"type\": \"integer\"\n        },\n        \"sharedWithUserId\": {\n            \"type\": \"integer\"\n        },\n        \"sharedWithTeamId\": {\n            \"type\": \"integer\"\n        },\n        \"isBreakdownShared\": {\n            \"type\": \"boolean\"\n        },\n        \"createdAt\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\ntv4.addSchema('event', eventSchema);\ntv4.addSchema('video', videoSchema);\ntv4.addSchema('share', shareSchema);\n\ntv4.addFormat('date-time', function(data, schema) {\n\n    var ISO8601 = /[0-9]{4,}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(?:\\.[0-9]+|)(?:[+-][0-9]{2}:[0-9]{2}|Z)/;\n\n    if (ISO8601.test(data) && !isNaN(Date.parse(data))) return null;\n\n    else return 'A valid ISO 8601 date/time string expected';\n});\n\nvar play = JSON.parse(responseBody);\n\nvar result = tv4.validateMultiple(play, playSchema);\n\ntests[\"Play conforms to schema\"] = result.valid;\n\nif (result.missing.length) console.log('Missing schema(s) ' + result.missing);\n\nif (result.errors.length) result.errors.forEach(function(error) {\n    \n   console.log(error.message + ' at ' + error.dataPath); \n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1422430799462,
			"name": "Get",
			"description": "Retrieve a single play object.\n\n_{{playId}}_ is a play ID",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "7a9a0085-b8e1-f6d2-ad18-3437a9418e4b"
		},
		{
			"id": "741d03d2-302e-48d1-7d0f-ea7a3ed3f12c",
			"headers": "Authorization: Bearer {{access_token}}\nContent-Type: application/json\n",
			"url": "{{url}}/{{version}}/users",
			"preRequestScript": "postman.setEnvironmentVariable(\"email\", 'test' + ~~(Math.random() * 1000) + '@krossover.com');\n\nvar firstName = postman.getEnvironmentVariable(\"firstName\");\nif (!firstName) postman.setEnvironmentVariable(\"firstName\", '');\n\nvar lastName = postman.getEnvironmentVariable(\"lastName\");\nif (!lastName) postman.setEnvironmentVariable(\"lastName\", '');",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\n\npostman.setGlobalVariable(\"userId\", data.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421610259766,
			"name": "Create",
			"description": "Add a new user",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"rawModeData": "{\n  \"firstName\":\"Test\",\n  \"lastName\":\"Test\",\n  \"email\":\"{{email}}\"\n}",
			"owner": 0,
			"folder": "83203dc7-1995-cd05-7d2f-dc99c22e4074"
		},
		{
			"id": "759adcd4-fb72-73bc-67f5-c91d750f9dc6",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/leagues?start={{start}}&count={{count}}&name={{name}}&sport={{sportId}}&school={{schoolId}}&schoolName={{schoolName}}&league={{leagueId}}&leagueName={{leagueName}}&roster={{rosterId}}&noRoleType={{noRoleTypeId}}&noRoleUser={{noRoleUserId}}&teamIds={{teamIds}}",
			"preRequestScript": "var start = postman.getEnvironmentVariable(\"start\");\nif (!start) postman.setEnvironmentVariable(\"start\", 0);\n\nvar count = postman.getEnvironmentVariable(\"count\");\nif (!count) postman.setEnvironmentVariable(\"count\", 100);\n\nvar name = postman.getEnvironmentVariable(\"name\");\nif (!name) postman.setEnvironmentVariable(\"name\", '');\n\nvar sportId = postman.getEnvironmentVariable(\"sportId\");\nif (!sportId) postman.setEnvironmentVariable(\"sportId\", 1);\n\nvar schoolId = postman.getEnvironmentVariable(\"schoolId\");\nif (!schoolId) postman.setEnvironmentVariable(\"schoolId\", 1);\n\nvar schoolName = postman.getEnvironmentVariable(\"schoolName\");\nif (!schoolName) postman.setEnvironmentVariable(\"schoolName\", '');\n\nvar leagueId = postman.getEnvironmentVariable(\"leagueId\");\nif (!leagueId) postman.setEnvironmentVariable(\"leagueId\", 1);\n\nvar leagueName = postman.getEnvironmentVariable(\"leagueName\");\nif (!leagueName) postman.setEnvironmentVariable(\"leagueName\", '');\n\nvar rosterId = postman.getEnvironmentVariable(\"rosterId\");\nif (!rosterId) postman.setEnvironmentVariable(\"rosterId\", 1);\n\nvar noRoleTypeId = postman.getEnvironmentVariable(\"noRoleTypeId\");\nif (!noRoleTypeId) postman.setEnvironmentVariable(\"noRoleTypeId\", 1);\n\nvar noRoleUserId = postman.getEnvironmentVariable(\"noRoleUserId\");\nif (!noRoleUserId) postman.setEnvironmentVariable(\"noRoleUserId\", 1);\n\nvar teamIds = postman.getEnvironmentVariable(\"teamIds\");\nif (!teamIds) postman.setEnvironmentVariable(\"teamIds\", [1]);\n\n",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1420439351023,
			"name": "Filter",
			"description": "- **{{start}}** _{Integer}_ offset to start results from\n\n- **{{count}}** _{Integer}_ number of results\n\n- **{{name}}** _{String}_ team name\n\n- **{{sportId}}** _{Integer}_ sport ID\n\n- **{{schoolId}}** _{Integer}_ school ID\n\n- **{{schoolName}}** _{String}_ school name\n\n- **{{leagueId}}** _{Integer}_ league ID\n\n- **{{leagueName}}** _{String}_ league name\n\n- **{{rosterId}}** _{Integer}_ roster ID\n\n- **{{noRoleTypeId}}** _{Integer}_ role type ID\n\n- **{{noRoleUserId}}** _{Integer}_ user ID\n\n- **{{teamIds}}** _{Integers}_ comma delimited list of team ID's\n",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "47d1078a-0d0e-7217-5379-1361f0a58a3a"
		},
		{
			"id": "777c4e61-548d-f826-1b96-22b98915ae93",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/sports",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var sportSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Sport Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\nvar sports = JSON.parse(responseBody);\n\ntests[\"Sports conform to schema\"] = sports.every(function(sport) {\n\n    var result = tv4.validateMultiple(sport, sportSchema);\n\n    if (result.missing.length) console.log('Missing schema(s) ' + result.missing);\n\n    if (result.errors.length) result.errors.forEach(function(error) {\n    \n        console.log(error.message + ' at ' + error.dataPath); \n    });\n    \n    return result.valid;\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421765359801,
			"name": "Query",
			"description": "",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "8c836835-6b6e-59ef-1c40-bc3ede697ae7"
		},
		{
			"id": "77b1e832-9269-deff-b3d9-da97685c3bab",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/users/{{userId}}",
			"preRequestScript": "var userId = postman.getEnvironmentVariable(\"userId\");\nif (!userId) postman.setEnvironmentVariable(\"userId\", 1);",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var user = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable(\"userId\", user.id);\n\nvar userSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"User Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"firstName\": {\n            \"type\": \"string\"\n        },\n        \"lastName\": {\n            \"type\": \"string\"\n        },\n        \"roles\": {\n            \"type\": \"array\",\n            \"items\": { \"$ref\": \"role\" }\n        },\n        \"email\": {\n            \"type\": \"string\"\n        },\n        \"isLocked\": {\n            \"type\": \"boolean\"\n        },\n        \"lastAccessed\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\nvar roleSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Role Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"userId\": {\n            \"type\": \"integer\"\n        },\n        \"teamId\": {\n            \"type\": \"integer\"\n        },\n        \"type\": {\n            \"type\": \"integer\"\n        },\n        \"isDefault\": {\n            \"type\": \"boolean\"\n        },\n        \"createdAt\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"tenureStart\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"tenureEnd\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\nvar subscriptionSchema =\n{\n    \"$schema\": \"http://json-schema.org/krossover/subscription\",\n    \"title\": \"Subscription Schema\",\n    \"type\": \"Object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"type\": {\n            \"type\": \"integer\"\n        },\n        \"userId\": {\n            \"type\": [\"null\", \"integer\"]\n        },\n        \"teamId\": {\n            \"type\": [\"null\", \"integer\"]\n        },\n        \"activatesAt\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"expiresAt\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"createdAt\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"updatedAt\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        }\n    },\n    \"required\": [\"userId\", \"teamId\"], // Mutually exclusive\n    \"additionalProperties\": false\n}\n\ntv4.addSchema('role', roleSchema);\ntv4.addSchema('subscription', subscriptionSchema);\n\ntv4.addFormat('date-time', function(data, schema) {\n\n    var ISO8601 = /[0-9]{4,}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(?:\\.[0-9]+|)(?:[+-][0-9]{2}:[0-9]{2}|Z)/;\n\n    if (ISO8601.test(data) && !isNaN(Date.parse(data))) return null;\n\n    else return 'A valid ISO 8601 date/time string expected';\n});\n\nvar user = JSON.parse(responseBody);\n\nvar result = tv4.validateMultiple(user, userSchema);\n\ntests[\"User conforms to schema\"] = result.valid;\n\nif (result.missing.length) console.log('Missing schema(s) ' + result.missing);\n\nif (result.errors.length) result.errors.forEach(function(error) {\n    \n   console.log(error.message + ' at ' + error.dataPath); \n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1428341290945,
			"name": "Get",
			"description": "Endpoint used to retrieve a single user based on ID.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false
		},
		{
			"id": "78f8edd0-30a7-d32f-a594-d7b1419bcdf1",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/position-sets",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var positionSetSchema = {\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"PositionSet Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"positions\": {\n            \"type\": \"array\",\n            \"items\": { \"$ref\": \"position\" }\n        }\n    },\n    \"additionalProperties\": false\n};\n\nvar positionSchema = {\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Position Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"description\": {\n            \"type\": \"string\"\n        },\n        \"positionSetId\": {\n            \"type\": \"integer\"\n        }\n    },\n    \"additionalProperties\": false\n};\n\ntv4.addSchema('position', positionSchema);\n\nvar positionsets = JSON.parse(responseBody);\n\ntests[\"Position-Sets conform to schema\"] = positionsets.every(function(positionset) {\n\n    var result = tv4.validateMultiple(positionset, positionSetSchema);\n\n    if (result.missing.length) console.log('Missing schema(s) ' + result.missing);\n\n    if (result.errors.length) result.errors.forEach(function(error) {\n    \n        console.log(error.message + ' at ' + error.dataPath); \n    });\n    \n    return result.valid;\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421765116727,
			"name": "Query",
			"description": "Get all availabe position sets.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "d4cad1f1-5618-c812-fb6b-8104cce33f08"
		},
		{
			"id": "7e0a1fda-6e59-c901-c2c9-dfaacca27724",
			"headers": "Authorization: Bearer {{access_token}}\nContent-Type: application/json\n",
			"url": "{{url}}/{{version}}/users/{{userId}}",
			"preRequestScript": "var userId = postman.getEnvironmentVariable(\"userId\");\nif (!userId) postman.setEnvironmentVariable(\"userId\", 1);",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1420439470821,
			"name": "Update",
			"description": "Update an existing user.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"rawModeData": "{\"id\":1,\"firstName\":\"Krossover\",\"lastName\":\"Super Admin\",\"roles\":[{\"userId\":1,\"type\":1,\"isDefault\":true,\"createdAt\":\"2014-07-01T13:28:06+00:00\"}],\"email\":\"superadmin@krossover.com\",\"isLocked\":false,\"lastAccessed\":\"2015-01-05T01:30:48+00:00\"}",
			"owner": 0,
			"folder": "83203dc7-1995-cd05-7d2f-dc99c22e4074"
		},
		{
			"id": "7f49ed1d-f37a-3ba7-8ebe-5a0d66db2ce0",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/schools?start={{start}}&count={{count}}&name={{schoolName}}&conference={{conferenceName}}&city={{cityName}}&region={{regionName}}&country={{countryName}}",
			"preRequestScript": "var start = postman.getEnvironmentVariable(\"start\");\nif (!start) postman.setEnvironmentVariable(\"start\", 0);\n\nvar count = postman.getEnvironmentVariable(\"count\");\nif (!count) postman.setEnvironmentVariable(\"count\", 100);\n\nvar schoolName = postman.getEnvironmentVariable(\"schoolName\");\nif (!schoolName) postman.setEnvironmentVariable(\"schoolName\", '');\n\nvar conferenceName = postman.getEnvironmentVariable(\"conferenceName\");\nif (!conferenceName) postman.setEnvironmentVariable(\"conferenceName\", '');\n\nvar cityName = postman.getEnvironmentVariable(\"cityName\");\nif (!cityName) postman.setEnvironmentVariable(\"cityName\", '');\n\nvar regionName = postman.getEnvironmentVariable(\"regionName\");\nif (!regionName) postman.setEnvironmentVariable(\"regionName\", '');\n\nvar countryName = postman.getEnvironmentVariable(\"countryName\");\nif (!countryName) postman.setEnvironmentVariable(\"countryName\", '');\n",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1420438656086,
			"name": "Filter",
			"description": "",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "0953f8a0-9750-28c6-d2b5-12fd90aec3fd"
		},
		{
			"id": "81203ff7-29a8-e7c9-99d3-0a6eb996c552",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/games",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"time": 1393559983170,
			"name": "Query",
			"description": "Endpoint used to get all games and to search for games using Query String filters.  If no filters are passed, it will return an array of all games.  Start and Count  are used to control how many results are returned and from what offset.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"preRequestScript": "",
			"folder": "f223d77a-3509-7b26-5ceb-50dbb9aa594a"
		},
		{
			"id": "8230210a-121d-bf8d-e191-c700c00e90c3",
			"headers": "Authorization: Bearer {{access_token}}\nContent-Type: application/json\n",
			"url": "{{url}}/{{version}}/schools",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var school = JSON.parse(responseBody);\n\npostman.setGlobalVariable(\"schoolId\", school.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1420438443982,
			"name": "Create",
			"description": "",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"rawModeData": "{\"name\":\"*Cambrian College\",\"address\":{\"id\":1,\"street1\":\"1400 Barry Downe Rd\",\"street2\":null,\"city\":\"Greater Sudbury\",\"regionCode\":\"ON\",\"postalCode\":\"P3A 3V8\",\"countryCode\":\"CN\"},\"conference\":null,\"division\":null,\"mascot\":\"Golden Shield\",\"type\":1,\"county\":null,\"phone\":null,\"ncesId\":null,\"ipedsId\":null,\"maxGrade\":null,\"minGrade\":null,\"closeIoLeadId\":null,\"isPublic\":0}",
			"owner": 0,
			"folder": "0953f8a0-9750-28c6-d2b5-12fd90aec3fd"
		},
		{
			"id": "842fbb03-51a7-f335-153c-cab183e58229",
			"headers": "Authorization: Bearer {{access_token}}\nContent-Type: application/json\n",
			"url": "{{url}}/{{version}}/players",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var plan = JSON.parse(responseBody);\n\npostman.setGlobalVariable(\"planId\", plan.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421586792133,
			"name": "Create",
			"description": "Add a new player.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"rawModeData": "{\n  \"firstName\":\"\",\n  \"lastName\":\"\",\n  \"userId\":null,\n  \"isUnknown\":false\n}",
			"owner": 0,
			"folder": "ac529f43-f032-0d4c-c0bd-82de246ac58d"
		},
		{
			"id": "8eee8bed-1528-2daf-8104-9449d0dc0f53",
			"headers": "Authorization: Bearer {{access_token}}\nContent-Type: application/json\n",
			"url": "{{url}}/{{version}}/schools/{{schoolId}}",
			"preRequestScript": "var playId = postman.getEnvironmentVariable(\"schoolId\");\nif (!playId) postman.setEnvironmentVariable(\"schoolId\", 1);",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421601680976,
			"name": "Update",
			"description": "Update an existing school.\n\n- **{{schoolId}}** _{Integer}_ a school ID",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"rawModeData": "{\"id\":1,\"name\":\"*Cambrian College\",\"address\":{\"id\":1,\"street1\":\"1400 Barry Downe Rd\",\"street2\":null,\"city\":\"Greater Sudbury\",\"regionCode\":\"ON\",\"postalCode\":\"P3A 3V8\",\"countryCode\":\"CN\"},\"conference\":null,\"division\":null,\"mascot\":\"Golden Shield\",\"type\":1,\"county\":null,\"phone\":null,\"ncesId\":null,\"ipedsId\":null,\"maxGrade\":null,\"minGrade\":null,\"closeIoLeadId\":null,\"isPublic\":0}",
			"owner": 0,
			"folder": "0953f8a0-9750-28c6-d2b5-12fd90aec3fd"
		},
		{
			"id": "9f93db99-5da4-50e2-a6df-c41259a49269",
			"headers": "Authorization: Bearer {{access_token}}\nContent-Type: application/json\n",
			"url": "{{url}}/{{version}}/leagues/{{leagueId}}",
			"preRequestScript": "var leagueId = postman.getEnvironmentVariable(\"leagueId\");\nif (!leagueId) postman.setEnvironmentVariable(\"leagueId\", 1);",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1420427819934,
			"name": "Update",
			"description": "Update an existing league.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"rawModeData": "{\"id\":1,\"name\":\"Girls HS Volleyball\",\"sportId\":4,\"gender\":\"female\",\"seasonStartMonth\":8,\"seasonStartDay\":1,\"seasonEndMonth\":2,\"seasonEndDay\":1,\"seasons\":[{\"id\":3,\"startDate\":\"2014-08-01T00:00:00+00:00\",\"endDate\":\"2015-02-01T22:59:59+00:00\",\"leagueId\":1}],\"tagSetId\":1,\"numberOfPeriods\":5,\"periodLabel\":\"Set\",\"periodAbbreviationLabel\":\"Set\",\"positionSetId\":1,\"flagRuleSetId\":1,\"filterSetId\":1}",
			"owner": 0,
			"folder": "cce060d0-b1bd-27d8-5fb6-ef2a5a60570c"
		},
		{
			"id": "a48c0880-d445-15fc-94ae-7cd0aa47b6d8",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/games?start={{start}}&count={{count}}&sport={{sportId}}&status={{statusId}}&team={{teamName}}&coachFirstName={{coachFirstName}}&coachLastName={{coachLastName}}&indexerFirstName={{indexerFirstName}}&indexerLastName={{indexerLastName}}&qaFirstName={{qaFirstName}}&qaLastName={{qaLastName}}",
			"preRequestScript": "var start = postman.getEnvironmentVariable(\"start\");\nif (!start) postman.setEnvironmentVariable(\"start\", 0);\n\nvar count = postman.getEnvironmentVariable(\"count\");\nif (!count) postman.setEnvironmentVariable(\"count\", 100);\n\nvar sportId = postman.getEnvironmentVariable(\"sportId\");\nif (!sportId) postman.setEnvironmentVariable(\"sportId\", 1);\n\nvar statusId = postman.getEnvironmentVariable(\"statusId\");\nif (!statusId) postman.setEnvironmentVariable(\"statusId\", 1);\n\nvar teamName = postman.getEnvironmentVariable(\"teamName\");\nif (!teamName) postman.setEnvironmentVariable(\"teamName\", '');\n\nvar coachFirstName = postman.getEnvironmentVariable(\"coachFirstName\");\nif (!coachFirstName) postman.setEnvironmentVariable(\"coachFirstName\", '');\n\nvar coachLastName = postman.getEnvironmentVariable(\"coachLastName\");\nif (!coachLastName) postman.setEnvironmentVariable(\"coachLastName\", '');\n\nvar indexerFirstName = postman.getEnvironmentVariable(\"indexerFirstName\");\nif (!indexerFirstName) postman.setEnvironmentVariable(\"indexerFirstName\", '');\n\nvar indexerLastName = postman.getEnvironmentVariable(\"indexerLastName\");\nif (!indexerLastName) postman.setEnvironmentVariable(\"indexerLastName\", '');\n\nvar qaFirstName = postman.getEnvironmentVariable(\"qaFirstName\");\nif (!qaFirstName) postman.setEnvironmentVariable(\"qaFirstName\", '');\n\nvar qaLastName = postman.getEnvironmentVariable(\"qaLastName\");\nif (!qaLastName) postman.setEnvironmentVariable(\"qaLastName\", '');",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1420423250205,
			"name": "Filter",
			"description": "- **{{start}}** _{Integer}_ offset to start results from\n\n- **{{count}}** _{Integer}_ number of results\n\n- **{{status}}** _{Integer}_ game status\n\t0. Not indexed\n\t1. Indexing, not started\n\t2. Indexing, in progress\n    3. QA, not started\n    4. QA, in progress\n    5. Set Aside\n    6. Indexed\n    7. Finalized\n\n- **{{gameType}}** _{Integer|Array.<Integer>}_ game type\n\t1. Conference\n    2. Non-conference\n    3. Playoff\n    4. Scouting\n    5. Scrimmage\n\n- **{{rosterId}}** _{Integer}_ roster ID\n\n- **{{team}}** _{String}_ team name\n\n- **{{teamId}}** _{Integer}_ team ID\n\n- **{{sportId}}** _{Integer}_ sport ID\n\n- **{{coachFirstName}}** _{String}_ coach first name\n\n- **{{coachLastName}}** _{String}_ coach last name\n\n- **{{indexerFirstName}}** _{String}_ indexer first name\n\n- **{{indexerLastName}}** _{String}_ indexer last name\n\n- **{{qaFirstName}}** _{String}_ QA first name\n\n- **{{qaLastName}}** _{String}_ QA last name\n\n- **{{assignedUserId}}** _{Integer}_ user ID assigned to game\n\n- **{{uploaderUserId}}** _{Integer}_ user ID who uploaded the game\n\n- **{{uploaderTeamId}}** _{Integer}_ team ID which uploaded the game\n\n- **{{reelId}}** _{Integer}_ reel ID game appears in\n\n- **{{videoStatus}}** _{Integer}_ video status\n\t1. Incomplete\n    2. Uploaded\n    3. Complete\n    4. Failed\n\n- **{{createdAt}}** _{String}_ date game was created\n\n- **{{isClone}}** _{Boolean}_ is game cloned\n\n- **{{sharedWithUserId}}** _{Integer}_ user ID who the game is shared with\n\n- **{{sharedWithTeamId}}** _{Integer}_ team ID which the game is shared with\n\n",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "f223d77a-3509-7b26-5ceb-50dbb9aa594a"
		},
		{
			"id": "a95a7ee4-0c8f-a25b-a88e-6daee3234936",
			"headers": "Content-Type: application/x-www-form-urlencoded\nAuthorization: Basic Y2lkOmNzZWNyZXQ=\n",
			"url": "{{url}}/oauth/token",
			"pathVariables": {},
			"method": "POST",
			"data": [
				{
					"key": "grant_type",
					"value": "authorization_code",
					"type": "text"
				},
				{
					"key": "code",
					"value": "{{code}}",
					"type": "text"
				}
			],
			"dataMode": "urlencoded",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable(\"access_token\", data.access_token);\npostman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);",
			"time": 1393518539655,
			"name": "Token",
			"description": "",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"preRequestScript": "",
			"folder": "6a1d90bd-fc67-c613-939a-beaa91a77436"
		},
		{
			"id": "ac27d94c-5604-4980-acaa-c144d2b8103b",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/tag-sets",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var tagSetSchema = {\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"TagSet Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"tags\": {\n            \"type\": \"array\",\n            \"items\": { \"$ref\": \"tag\" }\n        }\n    },\n    \"additionalProperties\": false\n};\n\nvar tagSchema = {\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Tag Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"description\": {\n            \"type\": \"string\"\n        },\n        \"shortcutKey\": {\n            \"type\": \"string\"\n        },      \n        \"userScript\": {\n            \"type\": [\"string\", \"null\"]\n        },\n        \"indexerScript\": {\n            \"type\": \"string\"\n        },\n        \"summaryScript\": {\n            \"type\": [\"string\", \"null\"]\n        },\n        \"summaryPriority\": {\n            \"type\": [\"integer\", \"null\"]\n        },\n        \"pointsAssigned\": {\n            \"type\": [\"integer\", \"null\"]\n        },\n        \"assignThisTeam\": {\n            \"type\": [\"boolean\", \"null\"]\n        },\n        \"buffer\": {\n            \"type\": [\"number\", \"null\"]\n        },\n        \"isStart\": {\n            \"type\": \"boolean\"\n        },\n        \"isEnd\": {\n            \"type\": \"boolean\"\n        },\n        \"isPeriodTag\": {\n            \"type\": \"boolean\"\n        },\n        \"tagSetId\": {\n            \"type\": \"integer\"\n        },\n        \"children\": {\n            \"type\": \"array\",\n            \"items\": { \"type\": \"integer\" }\n        },\n        \"tagVariables\": {\n            \"type\": \"array\",\n            \"items\": { \"$ref\": \"tagVariable\" }\n        }\n    },\n    \"additionalProperties\": false\n};\n\nvar tagVariableSchema = {\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Tag Variable Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"type\": {\n            \"type\": \"string\"\n        },\n        \"isRequired\": {\n            \"type\": \"boolean\"\n        },\n        // FIXME: tag.tagVariable.options should never be a string\n        \"options\": {\n            \"type\": [\"array\", \"string\"]\n        },\n        \"formations\": {\n            \"type\": \"array\"\n        }\n    },\n    \"additionalProperties\": false\n};\n\ntv4.addSchema('tag', tagSchema);\ntv4.addSchema('tagVariable', tagVariableSchema);\n\nvar tagsets = JSON.parse(responseBody);\n\ntests[\"Tag-Sets conform to schema\"] = tagsets.every(function(tagset) {\n\n    var result = tv4.validateMultiple(tagset, tagSetSchema);\n\n    if (result.missing.length) console.log('Missing schema(s) ' + result.missing);\n\n    if (result.errors.length) result.errors.forEach(function(error) {\n    \n        console.log(error.message + ' at ' + error.dataPath); \n    });\n    \n    return result.valid;\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421765429746,
			"name": "Query",
			"description": "Get all availabe tag sets.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "3672b2cc-aaa2-cecc-d299-8ca2f38c14d8"
		},
		{
			"id": "b7c789c9-5ced-e1be-0d34-2273430c20a2",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/filter-sets/{{filterSetId}}",
			"preRequestScript": "var filterSetId = postman.getEnvironmentVariable(\"filterSetId\");\nif (!filterSetId) postman.setEnvironmentVariable(\"filterSetId\", 1);",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\n\n\npostman.setEnvironmentVariable(\"filterSetId\", data.id);\n\nvar filterSetSchema = {\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"FilterSet Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"filters\": {\n            \"type\": \"array\",\n            \"items\": { \"$ref\": \"filter\" }\n        },\n        \"categories\": {\n            \"type\": \"array\"\n        }\n    },\n    \"additionalProperties\": false\n};\n\nvar filterSchema = {\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Filter Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"filterCategoryId\": {\n            \"type\": \"integer\"\n        },\n        \"filterSetId\": {\n            \"type\": \"integer\"\n        },\n        \"associatePlayer\": {\n            \"type\": \"boolean\"\n        },\n        \"parent\": {\n            \"type\": [\"integer\", \"null\"]\n        },\n        \"children\": {\n            \"type\": \"array\"\n        }\n    },\n    \"additionalProperties\": false\n};\n\ntv4.addSchema('filter', filterSchema);\n\nvar filterset = JSON.parse(responseBody);\n\nvar result = tv4.validateMultiple(filterset, filterSetSchema);\n\ntests[\"Filter-Set conforms to schema\"] = result.valid;\n\nif (result.missing.length) console.log('Missing schema(s) ' + result.missing);\n\nif (result.errors.length) result.errors.forEach(function(error) {\n    \n   console.log(error.message + ' at ' + error.dataPath); \n});",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421764499881,
			"name": "Get",
			"description": "Retrieve a single filter set object.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "db467c0c-d17b-c6fa-150d-d05481e2d46c"
		},
		{
			"id": "ba3062f9-d037-9cdc-c7d0-e6872efacad8",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/leagues?start={{start}}&count={{count}}&name={{name}}&gender={{gender}}&sportId={{sportId}}",
			"preRequestScript": "var start = postman.getEnvironmentVariable(\"start\");\nif (!start) postman.setEnvironmentVariable(\"start\", 0);\n\nvar count = postman.getEnvironmentVariable(\"count\");\nif (!count) postman.setEnvironmentVariable(\"count\", 100);\n\nvar name = postman.getEnvironmentVariable(\"name\");\nif (!name) postman.setEnvironmentVariable(\"name\", '');\n\nvar gender = postman.getEnvironmentVariable(\"gender\");\nif (!gender) postman.setEnvironmentVariable(\"gender\", 'male');\n\nvar sportId = postman.getEnvironmentVariable(\"sportId\");\nif (!sportId) postman.setEnvironmentVariable(\"sportId\", 1);\n",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1420428486156,
			"name": "Filter",
			"description": "- **{{start}}** _{Integer}_ offset to start results from\n\n- **{{count}}** _{Integer}_ number of results\n\n- **{{name}}** _{String}_ league name\n\n- **{{gender}}** _{String}_ `'male'` or `'female'`\n\n- **{{sportId}}** _{Integer}_ sport ID",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "cce060d0-b1bd-27d8-5fb6-ef2a5a60570c"
		},
		{
			"id": "baa01893-f482-a29e-5728-8fedbdd096f8",
			"headers": "Authorization: Bearer {{access_token}}\nContent-Type: application/json\n",
			"url": "{{url}}/{{version}}/players/{{playerId}}",
			"preRequestScript": "var playerId = postman.getEnvironmentVariable(\"playerId\");\nif (!playerId) postman.setEnvironmentVariable(\"playerId\", 1);",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421587875845,
			"name": "Update",
			"description": "Update an existing player.\n\n- **{{playerId}}** _{Integer}_ the ID of the player to update.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"rawModeData": "{\"id\":1,\"firstName\":\"Lauren\",\"lastName\":\"Reminga\",\"userId\":null,\"isUnknown\":false}",
			"owner": 0,
			"folder": "ac529f43-f032-0d4c-c0bd-82de246ac58d"
		},
		{
			"id": "c433714d-f310-f00b-6998-315aedb9c911",
			"headers": "Authorization: Bearer {{access_token}}\nContent-Type: application/json\n",
			"url": "{{url}}/{{version}}/teams/{{teamId}}",
			"preRequestScript": "var teamId = postman.getEnvironmentVariable(\"teamId\");\nif (!teamId) postman.setEnvironmentVariable(\"teamId\", 1);",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1420439161404,
			"name": "Update",
			"description": "",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"rawModeData": "{\"id\":1,\"name\":\"Golden Shield\",\"schoolId\":1,\"address\":{\"id\":1,\"street1\":\"1400 Barry Downe Rd\",\"city\":\"Greater Sudbury\",\"regionCode\":\"ON\",\"postalCode\":\"P3A 3V8\",\"countryCode\":\"CN\"},\"roles\":[{\"userId\":5295,\"type\":4,\"teamId\":1,\"tenureStart\":\"2014-09-17T09:39:56+00:00\",\"isDefault\":false,\"createdAt\":\"2014-09-17T09:39:59+00:00\"},{\"userId\":5501,\"type\":7,\"teamId\":1,\"isDefault\":false,\"createdAt\":\"2014-09-19T13:39:45+00:00\"},{\"userId\":5500,\"type\":7,\"teamId\":1,\"isDefault\":false,\"createdAt\":\"2014-09-19T13:37:59+00:00\"},{\"userId\":5884,\"type\":7,\"teamId\":1,\"isDefault\":false,\"createdAt\":\"2014-10-09T11:28:15+00:00\"},{\"userId\":5883,\"type\":7,\"teamId\":1,\"isDefault\":false,\"createdAt\":\"2014-10-09T11:27:37+00:00\"},{\"userId\":5887,\"type\":7,\"teamId\":1,\"isDefault\":false,\"createdAt\":\"2014-10-09T11:30:43+00:00\"},{\"userId\":5888,\"type\":7,\"teamId\":1,\"isDefault\":false,\"createdAt\":\"2014-10-09T11:31:03+00:00\"},{\"userId\":5889,\"type\":7,\"teamId\":1,\"isDefault\":false,\"createdAt\":\"2014-10-09T11:31:50+00:00\"},{\"userId\":5891,\"type\":7,\"teamId\":1,\"isDefault\":false,\"createdAt\":\"2014-10-09T11:33:04+00:00\"},{\"userId\":5885,\"type\":7,\"teamId\":1,\"isDefault\":false,\"createdAt\":\"2014-10-09T11:29:27+00:00\"},{\"userId\":5892,\"type\":7,\"teamId\":1,\"isDefault\":false,\"createdAt\":\"2014-10-09T11:33:28+00:00\"},{\"userId\":5890,\"type\":7,\"teamId\":1,\"isDefault\":false,\"createdAt\":\"2014-10-09T11:32:23+00:00\"},{\"userId\":5882,\"type\":7,\"teamId\":1,\"isDefault\":true,\"createdAt\":\"2014-10-09T11:26:58+00:00\"},{\"userId\":5893,\"type\":7,\"teamId\":1,\"isDefault\":false,\"createdAt\":\"2014-10-09T11:33:58+00:00\"},{\"userId\":12,\"type\":3,\"teamId\":1,\"isDefault\":false,\"createdAt\":\"2014-07-14T06:07:57+00:00\"},{\"userId\":5886,\"type\":7,\"teamId\":1,\"isDefault\":false,\"createdAt\":\"2014-10-09T11:30:00+00:00\"}],\"teamPlans\":[{\"startDate\":\"2014-07-15T00:00:00+00:00\",\"endDate\":\"2014-07-15T23:59:59+00:00\",\"id\":2,\"name\":\"\",\"maxGamesPerPlan\":0,\"maxAnyGames\":0,\"maxTurnaroundTime\":0,\"price\":0},{\"startDate\":\"2014-08-01T00:00:00+00:00\",\"endDate\":\"2015-03-01T00:00:00+00:00\",\"id\":312,\"name\":\"Champion\",\"maxGamesPerPlan\":84,\"maxAnyGames\":3,\"maxTurnaroundTime\":36,\"price\":0}],\"teamPackages\":[{\"id\":595,\"maxGamesPerPackage\":5,\"maxTurnaroundTime\":48,\"startDate\":\"2014-07-15T00:00:00+00:00\",\"endDate\":\"2014-08-12T23:59:59+00:00\"}],\"leagueId\":5,\"isCustomerTeam\":true,\"roster\":{\"id\":1,\"teamId\":1,\"playerInfo\":{\"34326\":{\"jerseyNumber\":\"1\",\"isActive\":true,\"positionIds\":[2]},\"34327\":{\"jerseyNumber\":\"14\",\"isActive\":true,\"positionIds\":[1]},\"46528\":{\"jerseyNumber\":\"2\",\"isActive\":true,\"positionIds\":[3]},\"46529\":{\"jerseyNumber\":\"3\",\"isActive\":true,\"positionIds\":[5]},\"46530\":{\"jerseyNumber\":\"4\",\"isActive\":true,\"positionIds\":[3]},\"46531\":{\"jerseyNumber\":\"5\",\"isActive\":true,\"positionIds\":[5]},\"46532\":{\"jerseyNumber\":\"6\",\"isActive\":true,\"positionIds\":[2]},\"46533\":{\"jerseyNumber\":\"7\",\"isActive\":true,\"positionIds\":[5]},\"46534\":{\"jerseyNumber\":\"8\",\"isActive\":true,\"positionIds\":[1]},\"46535\":{\"jerseyNumber\":\"9\",\"isActive\":true,\"positionIds\":[5]},\"46536\":{\"jerseyNumber\":\"10\",\"isActive\":true,\"positionIds\":[6]},\"46537\":{\"jerseyNumber\":\"12\",\"isActive\":true,\"positionIds\":[1]},\"46538\":{\"jerseyNumber\":\"15\",\"isActive\":true,\"positionIds\":[3]},\"46539\":{\"jerseyNumber\":\"16\",\"isActive\":true,\"positionIds\":[5]}}}}",
			"owner": 0,
			"folder": "47d1078a-0d0e-7217-5379-1361f0a58a3a"
		},
		{
			"id": "ccfeba3f-7977-ee5f-883c-335c5f03b36b",
			"headers": "Authorization: Bearer {{access_token}}\nContent-Type: application/json\n",
			"url": "{{url}}/{{version}}/plays/{{playId}}",
			"preRequestScript": "var playId = postman.getEnvironmentVariable(\"playId\");\nif (!playId) postman.setEnvironmentVariable(\"playId\", 1);",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1420430281823,
			"name": "Update",
			"description": "Update an existing play object.\n\n_{playId}_ is a play ID",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"rawModeData": "{\"id\":1,\"startTime\":87,\"endTime\":87,\"events\":[{\"id\":1,\"time\":87,\"tagId\":16,\"playId\":1,\"variableValues\":{\"7\":{\"id\":7,\"type\":null,\"index\":1,\"value\":\"1\"}}}],\"gameId\":1,\"flags\":[],\"clip\":null,\"shares\":[]}",
			"owner": 0,
			"folder": "7a9a0085-b8e1-f6d2-ad18-3437a9418e4b"
		},
		{
			"id": "cf85affd-05cd-bc81-4706-5c706baad87a",
			"headers": "Authorization: Bearer {{access_token}}\nContent-Type: application/json\n",
			"url": "{{url}}/{{version}}/leagues",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var league = JSON.parse(responseBody);\n\npostman.setGlobalVariable(\"leagueId\", league.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1420428108364,
			"name": "Create",
			"description": "Add a new league",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"rawModeData": "{\n\"name\":\"TEST\",\n\"sportId\":1,\n\"gender\":\"male\",\n\"seasonStartMonth\":8,\n\"seasonStartDay\":1,\n\"seasonEndMonth\":2,\n\"seasonEndDay\":1,\n\"tagSetId\":1,\n\"numberOfPeriods\":1,\n\"periodLabel\":\"Set\",\n\"periodAbbreviationLabel\":\"Set\",\n\"positionSetId\":1,\n\"flagRuleSetId\":1,\n\"filterSetId\":1\n}",
			"owner": 0,
			"folder": "cce060d0-b1bd-27d8-5fb6-ef2a5a60570c"
		},
		{
			"id": "cfa85c7d-24d7-b7d4-ff3a-b97e6e5b8022",
			"headers": "Authorization: Bearer {{access_token}}\nContent-Type: application/json\n",
			"url": "{{url}}/{{version}}/plans",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var plan = JSON.parse(responseBody);\n\npostman.setGlobalVariable(\"planId\", plan.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1420428647345,
			"name": "Create",
			"description": "Add a new default plan.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"rawModeData": "{\n  \"name\": \"\",\n  \"maxGamesPerPlan\": 0,\n  \"maxAnyGames\": 0,\n  \"maxTurnaroundTime\": 0,\n  \"price\": \"float\",\n  \"leagueIds\": [\n    1\n  ],\n  \"startDay\": 0,\n  \"startMonth\": 0,\n  \"endDay\": 0,\n  \"endMonth\": 0\n}",
			"owner": 0,
			"folder": "c8056818-8157-7a05-efbb-45eb8eee9180"
		},
		{
			"id": "d370867e-784f-70f2-d515-6c183cefa66f",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/users?start={{start}}&count={{count}}&email={{email}}&firstName={{firstName}&lastName={{lastName}}&role={{roleTypeId}}&hasNoRoles={{userId}}&isLocked={{isLocked}}",
			"preRequestScript": "var start = postman.getEnvironmentVariable(\"start\");\nif (!start) postman.setEnvironmentVariable(\"start\", 0);\n\nvar count = postman.getEnvironmentVariable(\"count\");\nif (!count) postman.setEnvironmentVariable(\"count\", 100);\n\nvar email = postman.getEnvironmentVariable(\"email\");\nif (!email) postman.setEnvironmentVariable(\"email\", '');\n\nvar firstName = postman.getEnvironmentVariable(\"firstName\");\nif (!firstName) postman.setEnvironmentVariable(\"firstName\", '');\n\nvar lastName = postman.getEnvironmentVariable(\"lastName\");\nif (!lastName) postman.setEnvironmentVariable(\"lastName\", '');\n\nvar roleTypeId = postman.getEnvironmentVariable(\"roleTypeId\");\nif (!roleTypeId) postman.setEnvironmentVariable(\"roleTypeId\", 1);\n\nvar userId = postman.getEnvironmentVariable(\"userId\");\nif (!userId) postman.setEnvironmentVariable(\"userId\", 1);\n\nvar isLocked = postman.getEnvironmentVariable(\"isLocked\");\nif (!isLocked) postman.setEnvironmentVariable(\"isLocked\", false);\n\n",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1420439631203,
			"name": "Filter",
			"description": "",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "83203dc7-1995-cd05-7d2f-dc99c22e4074"
		},
		{
			"id": "d80aa41b-2109-d504-a8ce-171e515536e2",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/games?start={{start}}&count={{count}}&teamId={{teamId}}&userId={{userId}}",
			"preRequestScript": "var start = postman.getEnvironmentVariable(\"start\");\nif (!start) postman.setEnvironmentVariable(\"start\", 0);\n\nvar count = postman.getEnvironmentVariable(\"count\");\nif (!count) postman.setEnvironmentVariable(\"count\", 100);\n\nvar sportId = postman.getEnvironmentVariable(\"teamId\");\nif (!sportId) postman.setEnvironmentVariable(\"teamId\", 1);\n\nvar statusId = postman.getEnvironmentVariable(\"userId\");\nif (!statusId) postman.setEnvironmentVariable(\"userId\", 1);\n",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421611855603,
			"name": "Filter",
			"description": "- **{{start}}** _{Integer}_ offset to start results from\n\n- **{{count}}** _{Integer}_ number of results\n\n- **{{teamId}}** _{Integer}_ team ID\n\n- **{{userId}}** _{Integer}_ user ID\n",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "7dce73db-ccb6-da13-1e7b-f6d96fa0faa9"
		},
		{
			"id": "db137f14-4edd-73ec-6d1a-1d10fae42df6",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/filter-sets",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var filterSetSchema = {\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"FilterSet Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"filters\": {\n            \"type\": \"array\",\n            \"items\": { \"$ref\": \"filter\" }\n        },\n        \"categories\": {\n            \"type\": \"array\"\n        }\n    },\n    \"additionalProperties\": false\n};\n\nvar filterSchema = {\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Filter Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"filterCategoryId\": {\n            \"type\": \"integer\"\n        },\n        \"filterSetId\": {\n            \"type\": \"integer\"\n        },\n        \"associatePlayer\": {\n            \"type\": \"boolean\"\n        },\n        \"parent\": {\n            \"type\": [\"integer\", \"null\"]\n        },\n        \"children\": {\n            \"type\": \"array\"\n        }\n    },\n    \"additionalProperties\": false\n};\n\ntv4.addSchema('filter', filterSchema);\n\nvar filtersets = JSON.parse(responseBody);\n\ntests[\"Filter-Sets conform to schema\"] = filtersets.every(function(filterset) {\n\n    var result = tv4.validateMultiple(filterset, filterSetSchema);\n\n    if (result.missing.length) console.log('Missing schema(s) ' + result.missing);\n\n    if (result.errors.length) result.errors.forEach(function(error) {\n    \n        console.log(error.message + ' at ' + error.dataPath); \n    });\n    \n    return result.valid;\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421764536550,
			"name": "Query",
			"description": "Get all availabe filter sets.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "db467c0c-d17b-c6fa-150d-d05481e2d46c"
		},
		{
			"id": "dbdf8105-0aa3-4789-35cb-b2e85e7cb280",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/reels/{{reelId}}",
			"preRequestScript": "var reelId = postman.getEnvironmentVariable(\"reelId\");\nif (!reelId) postman.setEnvironmentVariable(\"reelId\", 1);",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var reel = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable(\"reelId\", reel.id);\n\nvar reelSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Reel Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"uploaderUserId\": {\n            \"type\": \"integer\"\n        },\n        \"uploaderTeamId\": {\n            \"type\": \"integer\"\n        },\n        \"createdAt\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"updatedAt\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"plays\": {\n            \"type\": \"array\",\n            \"items\": \"integer\"\n        },\n        \"isDeleted\": {\n            \"type\": \"boolean\"\n        },\n        \"shares\": {\n            \"type\": \"array\",\n            \"items\": { \"$ref\": \"share\" }\n        }\n    },\n    \"additionalProperties\": false\n}\n\nvar shareSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Share Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"userId\": {\n            \"type\": \"integer\"\n        },\n        \"gameId\": {\n            \"type\": \"integer\"\n        },\n        \"reelId\": {\n            \"type\": \"integer\"\n        },\n        \"playId\": {\n            \"type\": \"integer\"\n        },\n        \"sharedWithUserId\": {\n            \"type\": \"integer\"\n        },\n        \"sharedWithTeamId\": {\n            \"type\": \"integer\"\n        },\n        \"isBreakdownShared\": {\n            \"type\": \"boolean\"\n        },\n        \"createdAt\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\ntv4.addSchema('share', shareSchema);\n\ntv4.addFormat('date-time', function(data, schema) {\n\n    var ISO8601 = /[0-9]{4,}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(?:\\.[0-9]+|)(?:[+-][0-9]{2}:[0-9]{2}|Z)/;\n\n    if (ISO8601.test(data) && !isNaN(Date.parse(data))) return null;\n\n    else return 'A valid ISO 8601 date/time string expected';\n});\n\nvar reel = JSON.parse(responseBody);\n\nvar result = tv4.validateMultiple(reel, reelSchema);\n\ntests[\"Reel conforms to schema\"] = result.valid;\n\nif (result.missing.length) console.log('Missing schema(s) ' + result.missing);\n\nif (result.errors.length) result.errors.forEach(function(error) {\n    \n   console.log(error.message + ' at ' + error.dataPath); \n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421765168940,
			"name": "Get",
			"description": "Endpoint used to retrieve a single reel based on ID.\n",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "7dce73db-ccb6-da13-1e7b-f6d96fa0faa9"
		},
		{
			"id": "dd85cf29-768f-4470-28be-88787ec57c31",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/teams/{{teamId}}",
			"preRequestScript": "var teamId = postman.getEnvironmentVariable(\"teamId\");\nif (!teamId) postman.setEnvironmentVariable(\"teamId\", 1);",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var team = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable(\"teamId\", team.id);\n\nvar teamSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Team Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"schoolId\": {\n            \"type\": \"integer\"\n        },\n        \"address\": { \"$ref\": \"address\" },\n        \"roles\": {\n            \"type\": \"array\",\n            \"items\": { \"$ref\": \"role\" }\n        },\n        \"teamPlans\": {\n            \"type\": \"array\",\n            \"items\": { \"$ref\": \"plan\" }\n        },\n        \"teamPackages\": {\n            \"type\": \"array\",\n            \"items\": { \"$ref\": \"package\" }\n        },\n        \"leagueId\": {\n            \"type\": \"integer\"\n        },\n        \"isCustomerTeam\": {\n            \"type\": \"boolean\"\n        },\n        \"roster\": { \"$ref\": \"roster\" }\n    },\n    \"additionalProperties\": true\n}\n\nvar addressSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Address Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"street1\": {\n            \"type\": [\"null\", \"string\"]\n        },\n        \"street2\": {\n            \"type\": [\"null\", \"string\"]\n        },\n        \"city\": {\n            \"type\": \"string\"\n        },\n        \"regionCode\": {\n            \"type\": \"string\"\n        },\n        \"postalCode\": {\n            \"type\": \"string\"\n        },\n        \"countryCode\": {\n            \"type\": \"string\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\nvar roleSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Role Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"userId\": {\n            \"type\": \"integer\"\n        },\n        \"teamId\": {\n            \"type\": \"integer\"\n        },\n        \"type\": {\n            \"type\": \"integer\"\n        },\n        \"isDefault\": {\n            \"type\": \"boolean\"\n        },\n        \"createdAt\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"tenureStart\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"tenureEnd\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\nvar planSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Plan Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"startDate\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"endDate\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"maxGamesPerPlan\": {\n            \"type\": \"integer\"\n        },\n        \"maxAnyGames\": {\n            \"type\": \"integer\"\n        },\n        \"maxTurnaroundTime\": {\n            \"type\": \"integer\"\n        },\n        \"price\": {\n            \"type\": \"integer\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\nvar packageSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Package Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"startDate\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"endDate\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"maxGamesPerPackage\": {\n            \"type\": \"integer\"\n        },\n        \"maxTurnaroundTime\": {\n            \"type\": \"integer\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\nvar rosterSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Roster Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"geamId\": {\n            \"type\": \"integer\"\n        },\n        \"teamId\": {\n            \"type\": \"integer\"\n        },\n        \"playerInfo\": {\n            \"type\": \"object\",\n            \"patternProperties\": {\n                \"[0-9]\": {\n                    \"jerseyNumber\": {\n                        \"type\": [\"integer\", \"string\"]\n                    },\n                    \"isActive\": {\n                        \"type\": \"boolean\"\n                    },\n                    \"positionIds\": {\n                        \"type\": \"array\",\n                        \"items\": \"integer\"\n                    }\n                }\n            }\n        }\n    },\n    \"additionalProperties\": false\n}\n\ntv4.addSchema('address', addressSchema);\ntv4.addSchema('role', roleSchema);\ntv4.addSchema('plan', planSchema);\ntv4.addSchema('package', packageSchema);\ntv4.addSchema('roster', rosterSchema);\n\ntv4.addFormat('date-time', function(data, schema) {\n\n    var ISO8601 = /[0-9]{4,}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(?:\\.[0-9]+|)(?:[+-][0-9]{2}:[0-9]{2}|Z)/;\n\n    if (ISO8601.test(data) && !isNaN(Date.parse(data))) return null;\n\n    else return 'A valid ISO 8601 date/time string expected';\n});\n\nvar team = JSON.parse(responseBody);\n\nvar result = tv4.validateMultiple(team, teamSchema);\n\ntests[\"Team conforms to schema\"] = result.valid;\n\nif (result.missing.length) console.log('Missing schema(s) ' + result.missing);\n\nif (result.errors.length) result.errors.forEach(function(error) {\n    \n   console.log(error.message + ' at ' + error.dataPath); \n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421765722252,
			"name": "Get",
			"description": "Retrieve a single team object.\n\n_{{teamId}}_ is a team ID",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "47d1078a-0d0e-7217-5379-1361f0a58a3a"
		},
		{
			"id": "e2c84b78-7bf4-0f9b-38b4-99a3a5a3e84e",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/users",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"time": 1393560073098,
			"name": "Query",
			"description": "Endpoint used to get all users and to search for users using Query String filters.  If no filters are passed, it will return an array of all users.  Start and Count  are used to control how many results are returned and from what offset.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"preRequestScript": "",
			"folder": "83203dc7-1995-cd05-7d2f-dc99c22e4074"
		},
		{
			"id": "e5ee026e-5e86-423f-cb13-8663086831a9",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/players/{{playerId}}",
			"preRequestScript": "var playerId = postman.getEnvironmentVariable(\"playerId\");\nif (!playerId) postman.setEnvironmentVariable(\"playerId\", 1);",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var player = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable(\"playerId\", player.id);\n\nvar playerSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Player Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"firstName\": {\n            \"type\": \"string\"\n        },\n        \"lastName\": {\n            \"type\": \"string\"\n        },\n        \"userId\": {\n            \"type\": [\"integer\", \"null\"]\n        },\n        \"isUnknown\": {\n            \"type\": \"boolean\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\nvar player = JSON.parse(responseBody);\n\nvar result = tv4.validateMultiple(player, playerSchema);\n\ntests[\"Player conforms to schema\"] = result.valid;\n\nif (result.missing.length) console.log('Missing schema(s) ' + result.missing);\n\nif (result.errors.length) result.errors.forEach(function(error) {\n    \n   console.log(error.message + ' at ' + error.dataPath); \n});\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421764946212,
			"name": "Get",
			"description": "Endpoint used to retrieve a single player based on ID.\n\n- **{{playerId}}** _{Integer}_ the ID of the player to get.",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "ac529f43-f032-0d4c-c0bd-82de246ac58d"
		},
		{
			"id": "ee75a20f-fe0c-9dbd-bb1a-ac91ffc780fb",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/schools",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var schoolSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"School Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"address\": { \"$ref\": \"address\" },\n        \"conference\": {\n            \"type\": [\"null\", \"string\"]\n        },\n        \"division\": {\n            \"type\": [\"null\", \"string\"]\n        },\n        \"mascot\": {\n            \"type\": [\"null\", \"string\"]\n        }\n    },\n    \"additionalProperties\": true\n}\n\nvar addressSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Address Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"street1\": {\n            \"type\": [\"null\", \"string\"]\n        },\n        \"street2\": {\n            \"type\": [\"null\", \"string\"]\n        },\n        \"city\": {\n            \"type\": \"string\"\n        },\n        \"regionCode\": {\n            \"type\": \"string\"\n        },\n        \"postalCode\": {\n            \"type\": \"string\"\n        },\n        \"countryCode\": {\n            \"type\": \"string\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\n\ntv4.addSchema('address', addressSchema);\n\nvar schools = JSON.parse(responseBody);\n\ntests[\"Schools conform to schema\"] = schools.every(function(school) {\n\n    var result = tv4.validateMultiple(school, schoolSchema);\n\n    if (result.missing.length) console.log('Missing schema(s) ' + result.missing);\n\n    if (result.errors.length) result.errors.forEach(function(error) {\n    \n        console.log(error.message + ' at ' + error.dataPath); \n    });\n    \n    return result.valid;\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1421765273466,
			"name": "Query",
			"description": "Get all schools.\n",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "0953f8a0-9750-28c6-d2b5-12fd90aec3fd"
		},
		{
			"id": "f0f05883-1c93-9184-a694-33a01c94cdcc",
			"headers": "Authorization: Bearer {{access_token}}\n",
			"url": "{{url}}/{{version}}/games/{{gameId}}",
			"preRequestScript": "var gameId = postman.getEnvironmentVariable(\"gameId\");\nif (!gameId) postman.setEnvironmentVariable(\"gameId\", 1);",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var game = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable(\"gameId\", game.id);\n\nvar gameSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Game Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"datePlayed\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"gameType\": {\n            \"type\": \"integer\"\n        },\n        \"isHomeGame\": {\n            \"type\": \"boolean\"\n        },\n        \"teamId\": {\n            \"type\": [\"null\", \"integer\"]\n        },\n        \"opposingTeamId\": {\n            \"type\": [\"null\", \"integer\"]\n        },\n        \"primaryJerseyColor\": {\n            \"type\": [\"null\", \"string\"]\n        },\n        \"secondaryJerseyColor\": {\n            \"type\": [\"null\", \"string\"]\n        },\n        \"opposingPrimaryJerseyColor\": {\n            \"type\": [\"null\", \"string\"]\n        },\n        \"opposingSecondaryJerseyColor\": {\n            \"type\": [\"null\", \"string\"]\n        },\n        \"finalScore\": {\n            \"type\": \"integer\"\n        },\n        \"opposingFinalScore\": {\n            \"type\": \"integer\"\n        },\n        \"indexedScore\": {\n            \"type\": [\"null\", \"integer\"]\n        },\n        \"opposingIndexedScore\": {\n            \"type\": [\"null\", \"integer\"]\n        },\n        \"rosters\": {\n            \"type\": \"object\",\n            \"patternProperties\": {\n                \"[0-9]\": {\n                    \"type\": \"object\",\n                    \"items\": { \"$ref\": \"roster\" }\n                }\n            }\n        },\n        \"video\": { \"$ref\": \"video\" },\n        \"status\": {\n            \"type\": \"integer\"\n        },\n        \"indexerAssignments\": {\n            \"type\": \"array\",\n            \"items\": { \"$ref\": \"indexerAssignment\" }\n        },\n        \"isDeleted\": {\n            \"type\": \"boolean\"\n        },\n        \"uploaderUserId\": {\n            \"type\": \"integer\"\n        },\n        \"uploaderTeamId\": {\n            \"type\": \"integer\"\n        },\n        \"createdAt\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"submittedAt\": {\n            \"type\": [\"null\", \"string\"],\n            \"format\": \"date-time\"\n        },\n        \"isClone\": {\n            \"type\": \"boolean\"\n        },\n        \"notes\": {\n            \"patternProperties\": {\n                \"[12345]\": {\n                    \"type\": \"array\",\n                    \"items\": { \"$ref\": \"note\" }\n                }\n            }\n        },\n        \"shares\": {\n            \"type\": \"array\",\n            \"items\": { \"$ref\": \"share\" }\n        }\n    },\n    \"additionalProperties\": false\n}\n\nvar rosterSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Roster Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"geamId\": {\n            \"type\": \"integer\"\n        },\n        \"teamId\": {\n            \"type\": \"integer\"\n        },\n        \"playerInfo\": {\n            \"type\": \"object\",\n            \"patternProperties\": {\n                \"[0-9]\": {\n                    \"jerseyNumber\": {\n                        \"type\": [\"integer\", \"string\"]\n                    },\n                    \"isActive\": {\n                        \"type\": \"boolean\"\n                    },\n                    \"positionIds\": {\n                        \"type\": \"array\",\n                        \"items\": \"integer\"\n                    }\n                }\n            }\n        }\n    },\n    \"additionalProperties\": false\n}\n\nvar indexerAssignmentSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Indexer Assignment Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"gameId\": {\n            \"type\": \"integer\"\n        },\n        \"userId\": {\n            \"type\": \"integer\"\n        },\n        \"timeAssigned\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"timeStarted\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"timeFinished\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"deadline\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"isQa\": {\n            \"type\": \"boolean\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\nvar noteSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Note Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"noteTypeId\": {\n            \"type\": \"integer\"\n        },\n        \"geamId\": {\n            \"type\": \"integer\"\n        },\n        \"content\": {\n            \"type\": \"string\"\n        },\n        \"gameTime\": {\n            \"type\": [\"integer\", \"null\"]\n        }\n    }\n}\n\nvar shareSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Share Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"userId\": {\n            \"type\": \"integer\"\n        },\n        \"gameId\": {\n            \"type\": \"integer\"\n        },\n        \"reelId\": {\n            \"type\": \"integer\"\n        },\n        \"playId\": {\n            \"type\": \"integer\"\n        },\n        \"sharedWithUserId\": {\n            \"type\": \"integer\"\n        },\n        \"sharedWithTeamId\": {\n            \"type\": \"integer\"\n        },\n        \"isBreakdownShared\": {\n            \"type\": \"boolean\"\n        },\n        \"createdAt\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\nvar videoSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Video Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"guid\": {\n            \"type\": \"string\"\n        },\n        \"status\": {\n            \"type\": \"integer\"\n        },\n        \"videoTranscodeProfiles\": {\n            \"type\": \"array\",\n            \"items\": { \"$ref\": \"transcodeProfile\" }\n        },\n        \"duration\": {\n            \"type\": \"number\"\n        },\n        \"thumbnail\": {\n            \"type\": \"string\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\nvar transcodeProfileSchema =\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Video Transcode Profile Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"videoId\": {\n            \"type\": \"integer\"\n        },\n        \"transcodeProfile\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"id\": {\n                    \"type\": \"integer\"\n                },\n                \"targetBitrate\": {\n                    \"type\": \"integer\"\n                },\n                \"maximumBitrate\": {\n                    \"type\": \"integer\"\n                },\n                \"minimumBitrate\": {\n                    \"type\": \"integer\"\n                },\n                \"description\": {\n                    \"type\": \"string\"\n                },\n                \"targetDisplayWidth\": {\n                    \"type\": \"integer\"\n                },\n                \"targetDisplayHeight\": {\n                    \"type\": \"integer\"\n                },\n                \"aspectRatio\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"status\": {\n            \"type\": \"integer\"\n        },\n        \"videoUrl\": {\n            \"type\": \"string\"\n        },\n    },\n    \"additionalProperties\": false\n}\n\n\ntv4.addSchema('note', noteSchema);\ntv4.addSchema('share', shareSchema);\ntv4.addSchema('video', videoSchema);\ntv4.addSchema('roster', rosterSchema);\ntv4.addSchema('transcodeProfile', transcodeProfileSchema);\ntv4.addSchema('indexerAssignment', indexerAssignmentSchema);\n          \ntv4.addFormat('date-time', function(data, schema) {\n\n    var ISO8601 = /[0-9]{4,}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(?:\\.[0-9]+|)(?:[+-][0-9]{2}:[0-9]{2}|Z)/;\n\n    if (data === null) return null;\n    if (ISO8601.test(data) && !isNaN(Date.parse(data))) return null;\n\n    else return 'A valid ISO 8601 date/time string expected';\n});\n\nvar game = JSON.parse(responseBody);\n\nvar result = tv4.validateMultiple(game, gameSchema);\n\ntests[\"Game conforms to schema\"] = result.valid;\n\nif (result.missing.length) console.log('Missing schema(s) ' + result.missing);\n\nif (result.errors.length) result.errors.forEach(function(error) {\n    \n   console.log(error.message + ' at ' + error.dataPath); \n});",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1422452178449,
			"name": "Get",
			"description": "Endpoint used to retrieve a single game based on ID.\n",
			"collectionId": "033e8a38-b4f4-9ede-292c-e49d34c9e343",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "f223d77a-3509-7b26-5ceb-50dbb9aa594a"
		}
	]
}